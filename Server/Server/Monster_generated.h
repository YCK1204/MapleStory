// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MONSTER_H_
#define FLATBUFFERS_GENERATED_MONSTER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "Creature_generated.h"
#include "Move_generated.h"

struct SC_MonsterMove;
struct SC_MonsterMoveBuilder;

enum MonsterState : uint8_t {
  MonsterState_Move = 0,
  MonsterState_Stand = 1,
  MonsterState_Hit = 2,
  MonsterState_Attack = 3,
  MonsterState_Die = 4,
  MonsterState_MIN = MonsterState_Move,
  MonsterState_MAX = MonsterState_Die
};

inline const MonsterState (&EnumValuesMonsterState())[5] {
  static const MonsterState values[] = {
    MonsterState_Move,
    MonsterState_Stand,
    MonsterState_Hit,
    MonsterState_Attack,
    MonsterState_Die
  };
  return values;
}

inline const char * const *EnumNamesMonsterState() {
  static const char * const names[6] = {
    "Move",
    "Stand",
    "Hit",
    "Attack",
    "Die",
    nullptr
  };
  return names;
}

inline const char *EnumNameMonsterState(MonsterState e) {
  if (::flatbuffers::IsOutRange(e, MonsterState_Move, MonsterState_Die)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMonsterState()[index];
}

struct SC_MonsterMove FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_MonsterMoveBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MOVE_INFOS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<MonsterInfo>> *move_infos() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<MonsterInfo>> *>(VT_MOVE_INFOS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MOVE_INFOS) &&
           verifier.VerifyVector(move_infos()) &&
           verifier.VerifyVectorOfTables(move_infos()) &&
           verifier.EndTable();
  }
};

struct SC_MonsterMoveBuilder {
  typedef SC_MonsterMove Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_move_infos(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<MonsterInfo>>> move_infos) {
    fbb_.AddOffset(SC_MonsterMove::VT_MOVE_INFOS, move_infos);
  }
  explicit SC_MonsterMoveBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_MonsterMove> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_MonsterMove>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_MonsterMove> CreateSC_MonsterMove(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<MonsterInfo>>> move_infos = 0) {
  SC_MonsterMoveBuilder builder_(_fbb);
  builder_.add_move_infos(move_infos);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SC_MonsterMove> CreateSC_MonsterMoveDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<MonsterInfo>> *move_infos = nullptr) {
  auto move_infos__ = move_infos ? _fbb.CreateVector<::flatbuffers::Offset<MonsterInfo>>(*move_infos) : 0;
  return CreateSC_MonsterMove(
      _fbb,
      move_infos__);
}

#endif  // FLATBUFFERS_GENERATED_MONSTER_H_
