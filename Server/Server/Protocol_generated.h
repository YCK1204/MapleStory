// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "Sign_generated.h"

enum PacketType : uint8_t {
  PacketType_NONE = 0,
  PacketType_C_SignUp = 1,
  PacketType_SD_SignUp = 2,
  PacketType_SC_SignUp = 3,
  PacketType_D_SignUp = 4,
  PacketType_C_SignIn = 5,
  PacketType_SD_SignIn = 6,
  PacketType_SC_SignIn = 7,
  PacketType_D_SignIn = 8,
  PacketType_SC_SignOut = 9,
  PacketType_C_SignOut = 10,
  PacketType_MIN = PacketType_NONE,
  PacketType_MAX = PacketType_C_SignOut
};

inline const PacketType (&EnumValuesPacketType())[11] {
  static const PacketType values[] = {
    PacketType_NONE,
    PacketType_C_SignUp,
    PacketType_SD_SignUp,
    PacketType_SC_SignUp,
    PacketType_D_SignUp,
    PacketType_C_SignIn,
    PacketType_SD_SignIn,
    PacketType_SC_SignIn,
    PacketType_D_SignIn,
    PacketType_SC_SignOut,
    PacketType_C_SignOut
  };
  return values;
}

inline const char * const *EnumNamesPacketType() {
  static const char * const names[12] = {
    "NONE",
    "C_SignUp",
    "SD_SignUp",
    "SC_SignUp",
    "D_SignUp",
    "C_SignIn",
    "SD_SignIn",
    "SC_SignIn",
    "D_SignIn",
    "SC_SignOut",
    "C_SignOut",
    nullptr
  };
  return names;
}

inline const char *EnumNamePacketType(PacketType e) {
  if (::flatbuffers::IsOutRange(e, PacketType_NONE, PacketType_C_SignOut)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPacketType()[index];
}

template<typename T> struct PacketTypeTraits {
  static const PacketType enum_value = PacketType_NONE;
};

template<> struct PacketTypeTraits<C_SignUp> {
  static const PacketType enum_value = PacketType_C_SignUp;
};

template<> struct PacketTypeTraits<SD_SignUp> {
  static const PacketType enum_value = PacketType_SD_SignUp;
};

template<> struct PacketTypeTraits<SC_SignUp> {
  static const PacketType enum_value = PacketType_SC_SignUp;
};

template<> struct PacketTypeTraits<D_SignUp> {
  static const PacketType enum_value = PacketType_D_SignUp;
};

template<> struct PacketTypeTraits<C_SignIn> {
  static const PacketType enum_value = PacketType_C_SignIn;
};

template<> struct PacketTypeTraits<SD_SignIn> {
  static const PacketType enum_value = PacketType_SD_SignIn;
};

template<> struct PacketTypeTraits<SC_SignIn> {
  static const PacketType enum_value = PacketType_SC_SignIn;
};

template<> struct PacketTypeTraits<D_SignIn> {
  static const PacketType enum_value = PacketType_D_SignIn;
};

template<> struct PacketTypeTraits<SC_SignOut> {
  static const PacketType enum_value = PacketType_SC_SignOut;
};

template<> struct PacketTypeTraits<C_SignOut> {
  static const PacketType enum_value = PacketType_C_SignOut;
};

bool VerifyPacketType(::flatbuffers::Verifier &verifier, const void *obj, PacketType type);
bool VerifyPacketTypeVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

inline bool VerifyPacketType(::flatbuffers::Verifier &verifier, const void *obj, PacketType type) {
  switch (type) {
    case PacketType_NONE: {
      return true;
    }
    case PacketType_C_SignUp: {
      auto ptr = reinterpret_cast<const C_SignUp *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketType_SD_SignUp: {
      auto ptr = reinterpret_cast<const SD_SignUp *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketType_SC_SignUp: {
      auto ptr = reinterpret_cast<const SC_SignUp *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketType_D_SignUp: {
      auto ptr = reinterpret_cast<const D_SignUp *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketType_C_SignIn: {
      auto ptr = reinterpret_cast<const C_SignIn *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketType_SD_SignIn: {
      auto ptr = reinterpret_cast<const SD_SignIn *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketType_SC_SignIn: {
      auto ptr = reinterpret_cast<const SC_SignIn *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketType_D_SignIn: {
      auto ptr = reinterpret_cast<const D_SignIn *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketType_SC_SignOut: {
      auto ptr = reinterpret_cast<const SC_SignOut *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketType_C_SignOut: {
      auto ptr = reinterpret_cast<const C_SignOut *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyPacketTypeVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyPacketType(
        verifier,  values->Get(i), types->GetEnum<PacketType>(i))) {
      return false;
    }
  }
  return true;
}

#endif  // FLATBUFFERS_GENERATED_PROTOCOL_H_
