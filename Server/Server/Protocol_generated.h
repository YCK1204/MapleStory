// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "Db_generated.h"
#include "DbLogin_generated.h"

enum PacketType : uint8_t {
  PacketType_NONE = 0,
  PacketType_S_Login = 1,
  PacketType_D_Login = 2,
  PacketType_MIN = PacketType_NONE,
  PacketType_MAX = PacketType_D_Login
};

inline const PacketType (&EnumValuesPacketType())[3] {
  static const PacketType values[] = {
    PacketType_NONE,
    PacketType_S_Login,
    PacketType_D_Login
  };
  return values;
}

inline const char * const *EnumNamesPacketType() {
  static const char * const names[4] = {
    "NONE",
    "S_Login",
    "D_Login",
    nullptr
  };
  return names;
}

inline const char *EnumNamePacketType(PacketType e) {
  if (::flatbuffers::IsOutRange(e, PacketType_NONE, PacketType_D_Login)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPacketType()[index];
}

template<typename T> struct PacketTypeTraits {
  static const PacketType enum_value = PacketType_NONE;
};

template<> struct PacketTypeTraits<S_Login> {
  static const PacketType enum_value = PacketType_S_Login;
};

template<> struct PacketTypeTraits<D_Login> {
  static const PacketType enum_value = PacketType_D_Login;
};

bool VerifyPacketType(::flatbuffers::Verifier &verifier, const void *obj, PacketType type);
bool VerifyPacketTypeVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

inline bool VerifyPacketType(::flatbuffers::Verifier &verifier, const void *obj, PacketType type) {
  switch (type) {
    case PacketType_NONE: {
      return true;
    }
    case PacketType_S_Login: {
      auto ptr = reinterpret_cast<const S_Login *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketType_D_Login: {
      auto ptr = reinterpret_cast<const D_Login *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyPacketTypeVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyPacketType(
        verifier,  values->Get(i), types->GetEnum<PacketType>(i))) {
      return false;
    }
  }
  return true;
}

#endif  // FLATBUFFERS_GENERATED_PROTOCOL_H_
