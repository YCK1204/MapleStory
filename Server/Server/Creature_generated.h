// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CREATURE_H_
#define FLATBUFFERS_GENERATED_CREATURE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "Character_generated.h"

struct Position;
struct PositionBuilder;

struct MonsterInfo;
struct MonsterInfoBuilder;

struct PlayerInfo;
struct PlayerInfoBuilder;

struct PlayerTotalInfo;
struct PlayerTotalInfoBuilder;

struct Position FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PositionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           verifier.EndTable();
  }
};

struct PositionBuilder {
  typedef Position Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(Position::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(Position::VT_Y, y, 0.0f);
  }
  explicit PositionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Position> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Position>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Position> CreatePosition(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f) {
  PositionBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct MonsterInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MonsterInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_ID = 6,
    VT_POSITION = 8,
    VT_DEST_X = 10
  };
  uint8_t type() const {
    return GetField<uint8_t>(VT_TYPE, 0);
  }
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  const Position *position() const {
    return GetPointer<const Position *>(VT_POSITION);
  }
  float dest_x() const {
    return GetField<float>(VT_DEST_X, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TYPE, 1) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           VerifyOffset(verifier, VT_POSITION) &&
           verifier.VerifyTable(position()) &&
           VerifyField<float>(verifier, VT_DEST_X, 4) &&
           verifier.EndTable();
  }
};

struct MonsterInfoBuilder {
  typedef MonsterInfo Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(uint8_t type) {
    fbb_.AddElement<uint8_t>(MonsterInfo::VT_TYPE, type, 0);
  }
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(MonsterInfo::VT_ID, id, 0);
  }
  void add_position(::flatbuffers::Offset<Position> position) {
    fbb_.AddOffset(MonsterInfo::VT_POSITION, position);
  }
  void add_dest_x(float dest_x) {
    fbb_.AddElement<float>(MonsterInfo::VT_DEST_X, dest_x, 0.0f);
  }
  explicit MonsterInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MonsterInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MonsterInfo>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MonsterInfo> CreateMonsterInfo(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t type = 0,
    uint64_t id = 0,
    ::flatbuffers::Offset<Position> position = 0,
    float dest_x = 0.0f) {
  MonsterInfoBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_dest_x(dest_x);
  builder_.add_position(position);
  builder_.add_type(type);
  return builder_.Finish();
}

struct PlayerInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHAR_INFO = 4,
    VT_POSITION = 6
  };
  const CharacterPreviewInfo *char_info() const {
    return GetPointer<const CharacterPreviewInfo *>(VT_CHAR_INFO);
  }
  const Position *position() const {
    return GetPointer<const Position *>(VT_POSITION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CHAR_INFO) &&
           verifier.VerifyTable(char_info()) &&
           VerifyOffset(verifier, VT_POSITION) &&
           verifier.VerifyTable(position()) &&
           verifier.EndTable();
  }
};

struct PlayerInfoBuilder {
  typedef PlayerInfo Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_char_info(::flatbuffers::Offset<CharacterPreviewInfo> char_info) {
    fbb_.AddOffset(PlayerInfo::VT_CHAR_INFO, char_info);
  }
  void add_position(::flatbuffers::Offset<Position> position) {
    fbb_.AddOffset(PlayerInfo::VT_POSITION, position);
  }
  explicit PlayerInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerInfo>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerInfo> CreatePlayerInfo(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<CharacterPreviewInfo> char_info = 0,
    ::flatbuffers::Offset<Position> position = 0) {
  PlayerInfoBuilder builder_(_fbb);
  builder_.add_position(position);
  builder_.add_char_info(char_info);
  return builder_.Finish();
}

struct PlayerTotalInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerTotalInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHAR_INFO = 4,
    VT_POSITION = 6
  };
  const CharacterTotalInfo *char_info() const {
    return GetPointer<const CharacterTotalInfo *>(VT_CHAR_INFO);
  }
  const Position *position() const {
    return GetPointer<const Position *>(VT_POSITION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CHAR_INFO) &&
           verifier.VerifyTable(char_info()) &&
           VerifyOffset(verifier, VT_POSITION) &&
           verifier.VerifyTable(position()) &&
           verifier.EndTable();
  }
};

struct PlayerTotalInfoBuilder {
  typedef PlayerTotalInfo Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_char_info(::flatbuffers::Offset<CharacterTotalInfo> char_info) {
    fbb_.AddOffset(PlayerTotalInfo::VT_CHAR_INFO, char_info);
  }
  void add_position(::flatbuffers::Offset<Position> position) {
    fbb_.AddOffset(PlayerTotalInfo::VT_POSITION, position);
  }
  explicit PlayerTotalInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerTotalInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerTotalInfo>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerTotalInfo> CreatePlayerTotalInfo(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<CharacterTotalInfo> char_info = 0,
    ::flatbuffers::Offset<Position> position = 0) {
  PlayerTotalInfoBuilder builder_(_fbb);
  builder_.add_position(position);
  builder_.add_char_info(char_info);
  return builder_.Finish();
}

#endif  // FLATBUFFERS_GENERATED_CREATURE_H_
