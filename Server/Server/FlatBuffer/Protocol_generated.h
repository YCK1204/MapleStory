// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Test;
struct TestBuilder;

struct Test FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEST = 4,
    VT_STR = 6
  };
  int32_t test() const {
    return GetField<int32_t>(VT_TEST, 0);
  }
  const ::flatbuffers::String *str() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TEST, 4) &&
           VerifyOffset(verifier, VT_STR) &&
           verifier.VerifyString(str()) &&
           verifier.EndTable();
  }
};

struct TestBuilder {
  typedef Test Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_test(int32_t test) {
    fbb_.AddElement<int32_t>(Test::VT_TEST, test, 0);
  }
  void add_str(::flatbuffers::Offset<::flatbuffers::String> str) {
    fbb_.AddOffset(Test::VT_STR, str);
  }
  explicit TestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Test> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Test>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Test> CreateTest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t test = 0,
    ::flatbuffers::Offset<::flatbuffers::String> str = 0) {
  TestBuilder builder_(_fbb);
  builder_.add_str(str);
  builder_.add_test(test);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Test> CreateTestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t test = 0,
    const char *str = nullptr) {
  auto str__ = str ? _fbb.CreateString(str) : 0;
  return CreateTest(
      _fbb,
      test,
      str__);
}

#endif  // FLATBUFFERS_GENERATED_PROTOCOL_H_
