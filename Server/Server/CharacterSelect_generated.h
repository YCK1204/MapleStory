// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CHARACTERSELECT_H_
#define FLATBUFFERS_GENERATED_CHARACTERSELECT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct C_CreateCharacter;
struct C_CreateCharacterBuilder;

struct SD_CreateCharacter;
struct SD_CreateCharacterBuilder;

struct D_CreateCharacter;
struct D_CreateCharacterBuilder;

struct SC_CreateCharacter;
struct SC_CreateCharacterBuilder;

enum CreateCharacterError : uint16_t {
  CreateCharacterError_SUCCESS = 0,
  CreateCharacterError_FULL = 1,
  CreateCharacterError_UNKNOWN = 2,
  CreateCharacterError_MIN = CreateCharacterError_SUCCESS,
  CreateCharacterError_MAX = CreateCharacterError_UNKNOWN
};

inline const CreateCharacterError (&EnumValuesCreateCharacterError())[3] {
  static const CreateCharacterError values[] = {
    CreateCharacterError_SUCCESS,
    CreateCharacterError_FULL,
    CreateCharacterError_UNKNOWN
  };
  return values;
}

inline const char * const *EnumNamesCreateCharacterError() {
  static const char * const names[4] = {
    "SUCCESS",
    "FULL",
    "UNKNOWN",
    nullptr
  };
  return names;
}

inline const char *EnumNameCreateCharacterError(CreateCharacterError e) {
  if (::flatbuffers::IsOutRange(e, CreateCharacterError_SUCCESS, CreateCharacterError_UNKNOWN)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCreateCharacterError()[index];
}

struct C_CreateCharacter FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C_CreateCharacterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHAR_ID = 4
  };
  uint16_t char_id() const {
    return GetField<uint16_t>(VT_CHAR_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_CHAR_ID, 2) &&
           verifier.EndTable();
  }
};

struct C_CreateCharacterBuilder {
  typedef C_CreateCharacter Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_char_id(uint16_t char_id) {
    fbb_.AddElement<uint16_t>(C_CreateCharacter::VT_CHAR_ID, char_id, 0);
  }
  explicit C_CreateCharacterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C_CreateCharacter> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C_CreateCharacter>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C_CreateCharacter> CreateC_CreateCharacter(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t char_id = 0) {
  C_CreateCharacterBuilder builder_(_fbb);
  builder_.add_char_id(char_id);
  return builder_.Finish();
}

struct SD_CreateCharacter FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SD_CreateCharacterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DB_ID = 4,
    VT_SESSION_ID = 6,
    VT_CHAR_ID = 8
  };
  uint64_t db_id() const {
    return GetField<uint64_t>(VT_DB_ID, 0);
  }
  uint64_t session_id() const {
    return GetField<uint64_t>(VT_SESSION_ID, 0);
  }
  uint16_t char_id() const {
    return GetField<uint16_t>(VT_CHAR_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_DB_ID, 8) &&
           VerifyField<uint64_t>(verifier, VT_SESSION_ID, 8) &&
           VerifyField<uint16_t>(verifier, VT_CHAR_ID, 2) &&
           verifier.EndTable();
  }
};

struct SD_CreateCharacterBuilder {
  typedef SD_CreateCharacter Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_db_id(uint64_t db_id) {
    fbb_.AddElement<uint64_t>(SD_CreateCharacter::VT_DB_ID, db_id, 0);
  }
  void add_session_id(uint64_t session_id) {
    fbb_.AddElement<uint64_t>(SD_CreateCharacter::VT_SESSION_ID, session_id, 0);
  }
  void add_char_id(uint16_t char_id) {
    fbb_.AddElement<uint16_t>(SD_CreateCharacter::VT_CHAR_ID, char_id, 0);
  }
  explicit SD_CreateCharacterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SD_CreateCharacter> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SD_CreateCharacter>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SD_CreateCharacter> CreateSD_CreateCharacter(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t db_id = 0,
    uint64_t session_id = 0,
    uint16_t char_id = 0) {
  SD_CreateCharacterBuilder builder_(_fbb);
  builder_.add_session_id(session_id);
  builder_.add_db_id(db_id);
  builder_.add_char_id(char_id);
  return builder_.Finish();
}

struct D_CreateCharacter FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef D_CreateCharacterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DB_ID = 4,
    VT_SESSION_ID = 6,
    VT_OK = 8
  };
  uint64_t db_id() const {
    return GetField<uint64_t>(VT_DB_ID, 0);
  }
  uint64_t session_id() const {
    return GetField<uint64_t>(VT_SESSION_ID, 0);
  }
  CreateCharacterError ok() const {
    return static_cast<CreateCharacterError>(GetField<uint16_t>(VT_OK, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_DB_ID, 8) &&
           VerifyField<uint64_t>(verifier, VT_SESSION_ID, 8) &&
           VerifyField<uint16_t>(verifier, VT_OK, 2) &&
           verifier.EndTable();
  }
};

struct D_CreateCharacterBuilder {
  typedef D_CreateCharacter Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_db_id(uint64_t db_id) {
    fbb_.AddElement<uint64_t>(D_CreateCharacter::VT_DB_ID, db_id, 0);
  }
  void add_session_id(uint64_t session_id) {
    fbb_.AddElement<uint64_t>(D_CreateCharacter::VT_SESSION_ID, session_id, 0);
  }
  void add_ok(CreateCharacterError ok) {
    fbb_.AddElement<uint16_t>(D_CreateCharacter::VT_OK, static_cast<uint16_t>(ok), 0);
  }
  explicit D_CreateCharacterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<D_CreateCharacter> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<D_CreateCharacter>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<D_CreateCharacter> CreateD_CreateCharacter(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t db_id = 0,
    uint64_t session_id = 0,
    CreateCharacterError ok = CreateCharacterError_SUCCESS) {
  D_CreateCharacterBuilder builder_(_fbb);
  builder_.add_session_id(session_id);
  builder_.add_db_id(db_id);
  builder_.add_ok(ok);
  return builder_.Finish();
}

struct SC_CreateCharacter FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_CreateCharacterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OK = 4
  };
  CreateCharacterError ok() const {
    return static_cast<CreateCharacterError>(GetField<uint16_t>(VT_OK, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_OK, 2) &&
           verifier.EndTable();
  }
};

struct SC_CreateCharacterBuilder {
  typedef SC_CreateCharacter Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ok(CreateCharacterError ok) {
    fbb_.AddElement<uint16_t>(SC_CreateCharacter::VT_OK, static_cast<uint16_t>(ok), 0);
  }
  explicit SC_CreateCharacterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_CreateCharacter> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_CreateCharacter>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_CreateCharacter> CreateSC_CreateCharacter(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    CreateCharacterError ok = CreateCharacterError_SUCCESS) {
  SC_CreateCharacterBuilder builder_(_fbb);
  builder_.add_ok(ok);
  return builder_.Finish();
}

#endif  // FLATBUFFERS_GENERATED_CHARACTERSELECT_H_
