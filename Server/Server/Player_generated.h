// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAYER_H_
#define FLATBUFFERS_GENERATED_PLAYER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct C_Attack;
struct C_AttackBuilder;

struct SC_Attack;
struct SC_AttackBuilder;

enum AttackEnum : uint8_t {
  AttackEnum_TANJIRO_ATTACK1 = 0,
  AttackEnum_TANJIRO_ATTACK2 = 1,
  AttackEnum_TANJIRO_ATTACK3 = 2,
  AttackEnum_TANJIRO_ATTACK4 = 3,
  AttackEnum_MIN = AttackEnum_TANJIRO_ATTACK1,
  AttackEnum_MAX = AttackEnum_TANJIRO_ATTACK4
};

inline const AttackEnum (&EnumValuesAttackEnum())[4] {
  static const AttackEnum values[] = {
    AttackEnum_TANJIRO_ATTACK1,
    AttackEnum_TANJIRO_ATTACK2,
    AttackEnum_TANJIRO_ATTACK3,
    AttackEnum_TANJIRO_ATTACK4
  };
  return values;
}

inline const char * const *EnumNamesAttackEnum() {
  static const char * const names[5] = {
    "TANJIRO_ATTACK1",
    "TANJIRO_ATTACK2",
    "TANJIRO_ATTACK3",
    "TANJIRO_ATTACK4",
    nullptr
  };
  return names;
}

inline const char *EnumNameAttackEnum(AttackEnum e) {
  if (::flatbuffers::IsOutRange(e, AttackEnum_TANJIRO_ATTACK1, AttackEnum_TANJIRO_ATTACK4)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAttackEnum()[index];
}

struct C_Attack FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C_AttackBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ATTACK_ID = 4
  };
  AttackEnum attack_id() const {
    return static_cast<AttackEnum>(GetField<uint8_t>(VT_ATTACK_ID, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ATTACK_ID, 1) &&
           verifier.EndTable();
  }
};

struct C_AttackBuilder {
  typedef C_Attack Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_attack_id(AttackEnum attack_id) {
    fbb_.AddElement<uint8_t>(C_Attack::VT_ATTACK_ID, static_cast<uint8_t>(attack_id), 0);
  }
  explicit C_AttackBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C_Attack> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C_Attack>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C_Attack> CreateC_Attack(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    AttackEnum attack_id = AttackEnum_TANJIRO_ATTACK1) {
  C_AttackBuilder builder_(_fbb);
  builder_.add_attack_id(attack_id);
  return builder_.Finish();
}

struct SC_Attack FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_AttackBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_ATTACK_ID = 6
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  AttackEnum attack_id() const {
    return static_cast<AttackEnum>(GetField<uint8_t>(VT_ATTACK_ID, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           VerifyField<uint8_t>(verifier, VT_ATTACK_ID, 1) &&
           verifier.EndTable();
  }
};

struct SC_AttackBuilder {
  typedef SC_Attack Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(SC_Attack::VT_ID, id, 0);
  }
  void add_attack_id(AttackEnum attack_id) {
    fbb_.AddElement<uint8_t>(SC_Attack::VT_ATTACK_ID, static_cast<uint8_t>(attack_id), 0);
  }
  explicit SC_AttackBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_Attack> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_Attack>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_Attack> CreateSC_Attack(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    AttackEnum attack_id = AttackEnum_TANJIRO_ATTACK1) {
  SC_AttackBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_attack_id(attack_id);
  return builder_.Finish();
}

#endif  // FLATBUFFERS_GENERATED_PLAYER_H_
