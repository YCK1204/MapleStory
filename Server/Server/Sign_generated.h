// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SIGN_H_
#define FLATBUFFERS_GENERATED_SIGN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct C_SignUp;
struct C_SignUpBuilder;

struct SD_SignUp;
struct SD_SignUpBuilder;

struct SC_SignUp;
struct SC_SignUpBuilder;

struct D_SignUp;
struct D_SignUpBuilder;

struct C_SignIn;
struct C_SignInBuilder;

struct SD_SignIn;
struct SD_SignInBuilder;

struct SC_SignIn;
struct SC_SignInBuilder;

struct D_SignIn;
struct D_SignInBuilder;

struct SC_SignOut;
struct SC_SignOutBuilder;

struct C_SignOut;
struct C_SignOutBuilder;

enum SignUpError : uint16_t {
  SignUpError_SUCCESS = 0,
  SignUpError_OVERLAPPED_USERID = 1,
  SignUpError_UNKNOWN = 2,
  SignUpError_MIN = SignUpError_SUCCESS,
  SignUpError_MAX = SignUpError_UNKNOWN
};

inline const SignUpError (&EnumValuesSignUpError())[3] {
  static const SignUpError values[] = {
    SignUpError_SUCCESS,
    SignUpError_OVERLAPPED_USERID,
    SignUpError_UNKNOWN
  };
  return values;
}

inline const char * const *EnumNamesSignUpError() {
  static const char * const names[4] = {
    "SUCCESS",
    "OVERLAPPED_USERID",
    "UNKNOWN",
    nullptr
  };
  return names;
}

inline const char *EnumNameSignUpError(SignUpError e) {
  if (::flatbuffers::IsOutRange(e, SignUpError_SUCCESS, SignUpError_UNKNOWN)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSignUpError()[index];
}

enum SignInError : uint16_t {
  SignInError_SUCCESS = 0,
  SignInError_INVALID_ID = 1,
  SignInError_INVALID_PW = 2,
  SignInError_UNKNOWN = 3,
  SignInError_MIN = SignInError_SUCCESS,
  SignInError_MAX = SignInError_UNKNOWN
};

inline const SignInError (&EnumValuesSignInError())[4] {
  static const SignInError values[] = {
    SignInError_SUCCESS,
    SignInError_INVALID_ID,
    SignInError_INVALID_PW,
    SignInError_UNKNOWN
  };
  return values;
}

inline const char * const *EnumNamesSignInError() {
  static const char * const names[5] = {
    "SUCCESS",
    "INVALID_ID",
    "INVALID_PW",
    "UNKNOWN",
    nullptr
  };
  return names;
}

inline const char *EnumNameSignInError(SignInError e) {
  if (::flatbuffers::IsOutRange(e, SignInError_SUCCESS, SignInError_UNKNOWN)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSignInError()[index];
}

struct C_SignUp FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C_SignUpBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4,
    VT_PASSWORD = 6
  };
  const ::flatbuffers::String *user_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER_ID);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER_ID) &&
           verifier.VerifyString(user_id()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct C_SignUpBuilder {
  typedef C_SignUp Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(::flatbuffers::Offset<::flatbuffers::String> user_id) {
    fbb_.AddOffset(C_SignUp::VT_USER_ID, user_id);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(C_SignUp::VT_PASSWORD, password);
  }
  explicit C_SignUpBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C_SignUp> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C_SignUp>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C_SignUp> CreateC_SignUp(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> user_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0) {
  C_SignUpBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<C_SignUp> CreateC_SignUpDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *user_id = nullptr,
    const char *password = nullptr) {
  auto user_id__ = user_id ? _fbb.CreateString(user_id) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return CreateC_SignUp(
      _fbb,
      user_id__,
      password__);
}

struct SD_SignUp FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SD_SignUpBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SESSION_ID = 4,
    VT_USER_ID = 6,
    VT_PASSOWRD = 8
  };
  uint32_t session_id() const {
    return GetField<uint32_t>(VT_SESSION_ID, 0);
  }
  const ::flatbuffers::String *user_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER_ID);
  }
  const ::flatbuffers::String *passowrd() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSOWRD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SESSION_ID, 4) &&
           VerifyOffset(verifier, VT_USER_ID) &&
           verifier.VerifyString(user_id()) &&
           VerifyOffset(verifier, VT_PASSOWRD) &&
           verifier.VerifyString(passowrd()) &&
           verifier.EndTable();
  }
};

struct SD_SignUpBuilder {
  typedef SD_SignUp Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_session_id(uint32_t session_id) {
    fbb_.AddElement<uint32_t>(SD_SignUp::VT_SESSION_ID, session_id, 0);
  }
  void add_user_id(::flatbuffers::Offset<::flatbuffers::String> user_id) {
    fbb_.AddOffset(SD_SignUp::VT_USER_ID, user_id);
  }
  void add_passowrd(::flatbuffers::Offset<::flatbuffers::String> passowrd) {
    fbb_.AddOffset(SD_SignUp::VT_PASSOWRD, passowrd);
  }
  explicit SD_SignUpBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SD_SignUp> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SD_SignUp>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SD_SignUp> CreateSD_SignUp(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t session_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> user_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> passowrd = 0) {
  SD_SignUpBuilder builder_(_fbb);
  builder_.add_passowrd(passowrd);
  builder_.add_user_id(user_id);
  builder_.add_session_id(session_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SD_SignUp> CreateSD_SignUpDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t session_id = 0,
    const char *user_id = nullptr,
    const char *passowrd = nullptr) {
  auto user_id__ = user_id ? _fbb.CreateString(user_id) : 0;
  auto passowrd__ = passowrd ? _fbb.CreateString(passowrd) : 0;
  return CreateSD_SignUp(
      _fbb,
      session_id,
      user_id__,
      passowrd__);
}

struct SC_SignUp FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_SignUpBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OK = 4
  };
  SignUpError ok() const {
    return static_cast<SignUpError>(GetField<uint16_t>(VT_OK, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_OK, 2) &&
           verifier.EndTable();
  }
};

struct SC_SignUpBuilder {
  typedef SC_SignUp Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ok(SignUpError ok) {
    fbb_.AddElement<uint16_t>(SC_SignUp::VT_OK, static_cast<uint16_t>(ok), 0);
  }
  explicit SC_SignUpBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_SignUp> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_SignUp>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_SignUp> CreateSC_SignUp(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    SignUpError ok = SignUpError_SUCCESS) {
  SC_SignUpBuilder builder_(_fbb);
  builder_.add_ok(ok);
  return builder_.Finish();
}

struct D_SignUp FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef D_SignUpBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DB_ID = 4,
    VT_SESSION_ID = 6,
    VT_OK = 8
  };
  uint32_t db_id() const {
    return GetField<uint32_t>(VT_DB_ID, 0);
  }
  uint32_t session_id() const {
    return GetField<uint32_t>(VT_SESSION_ID, 0);
  }
  SignUpError ok() const {
    return static_cast<SignUpError>(GetField<uint16_t>(VT_OK, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DB_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_SESSION_ID, 4) &&
           VerifyField<uint16_t>(verifier, VT_OK, 2) &&
           verifier.EndTable();
  }
};

struct D_SignUpBuilder {
  typedef D_SignUp Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_db_id(uint32_t db_id) {
    fbb_.AddElement<uint32_t>(D_SignUp::VT_DB_ID, db_id, 0);
  }
  void add_session_id(uint32_t session_id) {
    fbb_.AddElement<uint32_t>(D_SignUp::VT_SESSION_ID, session_id, 0);
  }
  void add_ok(SignUpError ok) {
    fbb_.AddElement<uint16_t>(D_SignUp::VT_OK, static_cast<uint16_t>(ok), 0);
  }
  explicit D_SignUpBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<D_SignUp> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<D_SignUp>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<D_SignUp> CreateD_SignUp(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t db_id = 0,
    uint32_t session_id = 0,
    SignUpError ok = SignUpError_SUCCESS) {
  D_SignUpBuilder builder_(_fbb);
  builder_.add_session_id(session_id);
  builder_.add_db_id(db_id);
  builder_.add_ok(ok);
  return builder_.Finish();
}

struct C_SignIn FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C_SignInBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4,
    VT_PASSWORD = 6
  };
  const ::flatbuffers::String *user_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER_ID);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER_ID) &&
           verifier.VerifyString(user_id()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct C_SignInBuilder {
  typedef C_SignIn Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(::flatbuffers::Offset<::flatbuffers::String> user_id) {
    fbb_.AddOffset(C_SignIn::VT_USER_ID, user_id);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(C_SignIn::VT_PASSWORD, password);
  }
  explicit C_SignInBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C_SignIn> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C_SignIn>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C_SignIn> CreateC_SignIn(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> user_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0) {
  C_SignInBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<C_SignIn> CreateC_SignInDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *user_id = nullptr,
    const char *password = nullptr) {
  auto user_id__ = user_id ? _fbb.CreateString(user_id) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return CreateC_SignIn(
      _fbb,
      user_id__,
      password__);
}

struct SD_SignIn FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SD_SignInBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SESSION_ID = 4,
    VT_USER_ID = 6,
    VT_PASSWORD = 8
  };
  uint32_t session_id() const {
    return GetField<uint32_t>(VT_SESSION_ID, 0);
  }
  const ::flatbuffers::String *user_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER_ID);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SESSION_ID, 4) &&
           VerifyOffset(verifier, VT_USER_ID) &&
           verifier.VerifyString(user_id()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct SD_SignInBuilder {
  typedef SD_SignIn Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_session_id(uint32_t session_id) {
    fbb_.AddElement<uint32_t>(SD_SignIn::VT_SESSION_ID, session_id, 0);
  }
  void add_user_id(::flatbuffers::Offset<::flatbuffers::String> user_id) {
    fbb_.AddOffset(SD_SignIn::VT_USER_ID, user_id);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(SD_SignIn::VT_PASSWORD, password);
  }
  explicit SD_SignInBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SD_SignIn> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SD_SignIn>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SD_SignIn> CreateSD_SignIn(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t session_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> user_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0) {
  SD_SignInBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_user_id(user_id);
  builder_.add_session_id(session_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SD_SignIn> CreateSD_SignInDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t session_id = 0,
    const char *user_id = nullptr,
    const char *password = nullptr) {
  auto user_id__ = user_id ? _fbb.CreateString(user_id) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return CreateSD_SignIn(
      _fbb,
      session_id,
      user_id__,
      password__);
}

struct SC_SignIn FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_SignInBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SESSION_ID = 4,
    VT_OK = 6
  };
  uint32_t session_id() const {
    return GetField<uint32_t>(VT_SESSION_ID, 0);
  }
  SignInError ok() const {
    return static_cast<SignInError>(GetField<uint16_t>(VT_OK, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SESSION_ID, 4) &&
           VerifyField<uint16_t>(verifier, VT_OK, 2) &&
           verifier.EndTable();
  }
};

struct SC_SignInBuilder {
  typedef SC_SignIn Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_session_id(uint32_t session_id) {
    fbb_.AddElement<uint32_t>(SC_SignIn::VT_SESSION_ID, session_id, 0);
  }
  void add_ok(SignInError ok) {
    fbb_.AddElement<uint16_t>(SC_SignIn::VT_OK, static_cast<uint16_t>(ok), 0);
  }
  explicit SC_SignInBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_SignIn> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_SignIn>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_SignIn> CreateSC_SignIn(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t session_id = 0,
    SignInError ok = SignInError_SUCCESS) {
  SC_SignInBuilder builder_(_fbb);
  builder_.add_session_id(session_id);
  builder_.add_ok(ok);
  return builder_.Finish();
}

struct D_SignIn FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef D_SignInBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DB_ID = 4,
    VT_SESSION_ID = 6,
    VT_OK = 8
  };
  uint32_t db_id() const {
    return GetField<uint32_t>(VT_DB_ID, 0);
  }
  uint32_t session_id() const {
    return GetField<uint32_t>(VT_SESSION_ID, 0);
  }
  SignInError ok() const {
    return static_cast<SignInError>(GetField<uint16_t>(VT_OK, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DB_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_SESSION_ID, 4) &&
           VerifyField<uint16_t>(verifier, VT_OK, 2) &&
           verifier.EndTable();
  }
};

struct D_SignInBuilder {
  typedef D_SignIn Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_db_id(uint32_t db_id) {
    fbb_.AddElement<uint32_t>(D_SignIn::VT_DB_ID, db_id, 0);
  }
  void add_session_id(uint32_t session_id) {
    fbb_.AddElement<uint32_t>(D_SignIn::VT_SESSION_ID, session_id, 0);
  }
  void add_ok(SignInError ok) {
    fbb_.AddElement<uint16_t>(D_SignIn::VT_OK, static_cast<uint16_t>(ok), 0);
  }
  explicit D_SignInBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<D_SignIn> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<D_SignIn>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<D_SignIn> CreateD_SignIn(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t db_id = 0,
    uint32_t session_id = 0,
    SignInError ok = SignInError_SUCCESS) {
  D_SignInBuilder builder_(_fbb);
  builder_.add_session_id(session_id);
  builder_.add_db_id(db_id);
  builder_.add_ok(ok);
  return builder_.Finish();
}

struct SC_SignOut FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_SignOutBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct SC_SignOutBuilder {
  typedef SC_SignOut Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit SC_SignOutBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_SignOut> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_SignOut>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_SignOut> CreateSC_SignOut(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  SC_SignOutBuilder builder_(_fbb);
  return builder_.Finish();
}

struct C_SignOut FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C_SignOutBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct C_SignOutBuilder {
  typedef C_SignOut Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit C_SignOutBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C_SignOut> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C_SignOut>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C_SignOut> CreateC_SignOut(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  C_SignOutBuilder builder_(_fbb);
  return builder_.Finish();
}

#endif  // FLATBUFFERS_GENERATED_SIGN_H_
