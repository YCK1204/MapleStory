// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MOVE_H_
#define FLATBUFFERS_GENERATED_MOVE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct C_MoveStart;
struct C_MoveStartBuilder;

struct SC_MoveStart;
struct SC_MoveStartBuilder;

struct C_MoveEnd;
struct C_MoveEndBuilder;

struct SC_MoveEnd;
struct SC_MoveEndBuilder;

enum MoveDirection : uint8_t {
  MoveDirection_NONE = 0,
  MoveDirection_LEFT = 1,
  MoveDirection_RIGHT = 2,
  MoveDirection_MIN = MoveDirection_NONE,
  MoveDirection_MAX = MoveDirection_RIGHT
};

inline const MoveDirection (&EnumValuesMoveDirection())[3] {
  static const MoveDirection values[] = {
    MoveDirection_NONE,
    MoveDirection_LEFT,
    MoveDirection_RIGHT
  };
  return values;
}

inline const char * const *EnumNamesMoveDirection() {
  static const char * const names[4] = {
    "NONE",
    "LEFT",
    "RIGHT",
    nullptr
  };
  return names;
}

inline const char *EnumNameMoveDirection(MoveDirection e) {
  if (::flatbuffers::IsOutRange(e, MoveDirection_NONE, MoveDirection_RIGHT)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMoveDirection()[index];
}

struct C_MoveStart FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C_MoveStartBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DIR = 4,
    VT_X = 6,
    VT_Y = 8
  };
  MoveDirection dir() const {
    return static_cast<MoveDirection>(GetField<uint8_t>(VT_DIR, 0));
  }
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_DIR, 1) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           verifier.EndTable();
  }
};

struct C_MoveStartBuilder {
  typedef C_MoveStart Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_dir(MoveDirection dir) {
    fbb_.AddElement<uint8_t>(C_MoveStart::VT_DIR, static_cast<uint8_t>(dir), 0);
  }
  void add_x(float x) {
    fbb_.AddElement<float>(C_MoveStart::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(C_MoveStart::VT_Y, y, 0.0f);
  }
  explicit C_MoveStartBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C_MoveStart> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C_MoveStart>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C_MoveStart> CreateC_MoveStart(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    MoveDirection dir = MoveDirection_NONE,
    float x = 0.0f,
    float y = 0.0f) {
  C_MoveStartBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_dir(dir);
  return builder_.Finish();
}

struct SC_MoveStart FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_MoveStartBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_DIR = 6,
    VT_X = 8,
    VT_Y = 10
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  MoveDirection dir() const {
    return static_cast<MoveDirection>(GetField<uint8_t>(VT_DIR, 0));
  }
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           VerifyField<uint8_t>(verifier, VT_DIR, 1) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           verifier.EndTable();
  }
};

struct SC_MoveStartBuilder {
  typedef SC_MoveStart Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(SC_MoveStart::VT_ID, id, 0);
  }
  void add_dir(MoveDirection dir) {
    fbb_.AddElement<uint8_t>(SC_MoveStart::VT_DIR, static_cast<uint8_t>(dir), 0);
  }
  void add_x(float x) {
    fbb_.AddElement<float>(SC_MoveStart::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(SC_MoveStart::VT_Y, y, 0.0f);
  }
  explicit SC_MoveStartBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_MoveStart> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_MoveStart>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_MoveStart> CreateSC_MoveStart(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    MoveDirection dir = MoveDirection_NONE,
    float x = 0.0f,
    float y = 0.0f) {
  SC_MoveStartBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_dir(dir);
  return builder_.Finish();
}

struct C_MoveEnd FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C_MoveEndBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           verifier.EndTable();
  }
};

struct C_MoveEndBuilder {
  typedef C_MoveEnd Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(C_MoveEnd::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(C_MoveEnd::VT_Y, y, 0.0f);
  }
  explicit C_MoveEndBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C_MoveEnd> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C_MoveEnd>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C_MoveEnd> CreateC_MoveEnd(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f) {
  C_MoveEndBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct SC_MoveEnd FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_MoveEndBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_X = 6,
    VT_Y = 8
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           verifier.EndTable();
  }
};

struct SC_MoveEndBuilder {
  typedef SC_MoveEnd Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(SC_MoveEnd::VT_ID, id, 0);
  }
  void add_x(float x) {
    fbb_.AddElement<float>(SC_MoveEnd::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(SC_MoveEnd::VT_Y, y, 0.0f);
  }
  explicit SC_MoveEndBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_MoveEnd> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_MoveEnd>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_MoveEnd> CreateSC_MoveEnd(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    float x = 0.0f,
    float y = 0.0f) {
  SC_MoveEndBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

#endif  // FLATBUFFERS_GENERATED_MOVE_H_
