// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SPAWN_H_
#define FLATBUFFERS_GENERATED_SPAWN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "Creature_generated.h"

struct C_EnterMap;
struct C_EnterMapBuilder;

struct C_EnterGame;
struct C_EnterGameBuilder;

struct SC_EnterMap;
struct SC_EnterMapBuilder;

struct SC_PSpawn;
struct SC_PSpawnBuilder;

struct SC_MSpawn;
struct SC_MSpawnBuilder;

struct C_Despawn;
struct C_DespawnBuilder;

struct SC_Despawn;
struct SC_DespawnBuilder;

struct C_EnterMap FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C_EnterMapBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAP_ID = 4
  };
  uint8_t map_id() const {
    return GetField<uint8_t>(VT_MAP_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MAP_ID, 1) &&
           verifier.EndTable();
  }
};

struct C_EnterMapBuilder {
  typedef C_EnterMap Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_map_id(uint8_t map_id) {
    fbb_.AddElement<uint8_t>(C_EnterMap::VT_MAP_ID, map_id, 0);
  }
  explicit C_EnterMapBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C_EnterMap> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C_EnterMap>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C_EnterMap> CreateC_EnterMap(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t map_id = 0) {
  C_EnterMapBuilder builder_(_fbb);
  builder_.add_map_id(map_id);
  return builder_.Finish();
}

struct C_EnterGame FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C_EnterGameBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAP_ID = 4
  };
  uint8_t map_id() const {
    return GetField<uint8_t>(VT_MAP_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MAP_ID, 1) &&
           verifier.EndTable();
  }
};

struct C_EnterGameBuilder {
  typedef C_EnterGame Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_map_id(uint8_t map_id) {
    fbb_.AddElement<uint8_t>(C_EnterGame::VT_MAP_ID, map_id, 0);
  }
  explicit C_EnterGameBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C_EnterGame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C_EnterGame>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C_EnterGame> CreateC_EnterGame(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t map_id = 0) {
  C_EnterGameBuilder builder_(_fbb);
  builder_.add_map_id(map_id);
  return builder_.Finish();
}

struct SC_EnterMap FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_EnterMapBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAP_ID = 4,
    VT_PLAYERS = 6,
    VT_MONSTERS = 8,
    VT_MY_PLAYER_INFO = 10
  };
  uint8_t map_id() const {
    return GetField<uint8_t>(VT_MAP_ID, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<PlayerInfo>> *players() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<PlayerInfo>> *>(VT_PLAYERS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<MonsterInfo>> *monsters() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<MonsterInfo>> *>(VT_MONSTERS);
  }
  const CharacterTotalInfo *my_player_info() const {
    return GetPointer<const CharacterTotalInfo *>(VT_MY_PLAYER_INFO);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MAP_ID, 1) &&
           VerifyOffset(verifier, VT_PLAYERS) &&
           verifier.VerifyVector(players()) &&
           verifier.VerifyVectorOfTables(players()) &&
           VerifyOffset(verifier, VT_MONSTERS) &&
           verifier.VerifyVector(monsters()) &&
           verifier.VerifyVectorOfTables(monsters()) &&
           VerifyOffset(verifier, VT_MY_PLAYER_INFO) &&
           verifier.VerifyTable(my_player_info()) &&
           verifier.EndTable();
  }
};

struct SC_EnterMapBuilder {
  typedef SC_EnterMap Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_map_id(uint8_t map_id) {
    fbb_.AddElement<uint8_t>(SC_EnterMap::VT_MAP_ID, map_id, 0);
  }
  void add_players(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<PlayerInfo>>> players) {
    fbb_.AddOffset(SC_EnterMap::VT_PLAYERS, players);
  }
  void add_monsters(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<MonsterInfo>>> monsters) {
    fbb_.AddOffset(SC_EnterMap::VT_MONSTERS, monsters);
  }
  void add_my_player_info(::flatbuffers::Offset<CharacterTotalInfo> my_player_info) {
    fbb_.AddOffset(SC_EnterMap::VT_MY_PLAYER_INFO, my_player_info);
  }
  explicit SC_EnterMapBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_EnterMap> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_EnterMap>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_EnterMap> CreateSC_EnterMap(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t map_id = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<PlayerInfo>>> players = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<MonsterInfo>>> monsters = 0,
    ::flatbuffers::Offset<CharacterTotalInfo> my_player_info = 0) {
  SC_EnterMapBuilder builder_(_fbb);
  builder_.add_my_player_info(my_player_info);
  builder_.add_monsters(monsters);
  builder_.add_players(players);
  builder_.add_map_id(map_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SC_EnterMap> CreateSC_EnterMapDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t map_id = 0,
    const std::vector<::flatbuffers::Offset<PlayerInfo>> *players = nullptr,
    const std::vector<::flatbuffers::Offset<MonsterInfo>> *monsters = nullptr,
    ::flatbuffers::Offset<CharacterTotalInfo> my_player_info = 0) {
  auto players__ = players ? _fbb.CreateVector<::flatbuffers::Offset<PlayerInfo>>(*players) : 0;
  auto monsters__ = monsters ? _fbb.CreateVector<::flatbuffers::Offset<MonsterInfo>>(*monsters) : 0;
  return CreateSC_EnterMap(
      _fbb,
      map_id,
      players__,
      monsters__,
      my_player_info);
}

struct SC_PSpawn FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_PSpawnBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_INFO = 4
  };
  const PlayerInfo *player_info() const {
    return GetPointer<const PlayerInfo *>(VT_PLAYER_INFO);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PLAYER_INFO) &&
           verifier.VerifyTable(player_info()) &&
           verifier.EndTable();
  }
};

struct SC_PSpawnBuilder {
  typedef SC_PSpawn Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_info(::flatbuffers::Offset<PlayerInfo> player_info) {
    fbb_.AddOffset(SC_PSpawn::VT_PLAYER_INFO, player_info);
  }
  explicit SC_PSpawnBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_PSpawn> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_PSpawn>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_PSpawn> CreateSC_PSpawn(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<PlayerInfo> player_info = 0) {
  SC_PSpawnBuilder builder_(_fbb);
  builder_.add_player_info(player_info);
  return builder_.Finish();
}

struct SC_MSpawn FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_MSpawnBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MONSTERS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<MonsterInfo>> *monsters() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<MonsterInfo>> *>(VT_MONSTERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MONSTERS) &&
           verifier.VerifyVector(monsters()) &&
           verifier.VerifyVectorOfTables(monsters()) &&
           verifier.EndTable();
  }
};

struct SC_MSpawnBuilder {
  typedef SC_MSpawn Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_monsters(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<MonsterInfo>>> monsters) {
    fbb_.AddOffset(SC_MSpawn::VT_MONSTERS, monsters);
  }
  explicit SC_MSpawnBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_MSpawn> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_MSpawn>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_MSpawn> CreateSC_MSpawn(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<MonsterInfo>>> monsters = 0) {
  SC_MSpawnBuilder builder_(_fbb);
  builder_.add_monsters(monsters);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SC_MSpawn> CreateSC_MSpawnDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<MonsterInfo>> *monsters = nullptr) {
  auto monsters__ = monsters ? _fbb.CreateVector<::flatbuffers::Offset<MonsterInfo>>(*monsters) : 0;
  return CreateSC_MSpawn(
      _fbb,
      monsters__);
}

struct C_Despawn FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C_DespawnBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct C_DespawnBuilder {
  typedef C_Despawn Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit C_DespawnBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C_Despawn> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C_Despawn>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C_Despawn> CreateC_Despawn(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  C_DespawnBuilder builder_(_fbb);
  return builder_.Finish();
}

struct SC_Despawn FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_DespawnBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4
  };
  const ::flatbuffers::Vector<uint64_t> *id() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_ID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyVector(id()) &&
           verifier.EndTable();
  }
};

struct SC_DespawnBuilder {
  typedef SC_Despawn Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> id) {
    fbb_.AddOffset(SC_Despawn::VT_ID, id);
  }
  explicit SC_DespawnBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_Despawn> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_Despawn>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_Despawn> CreateSC_Despawn(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> id = 0) {
  SC_DespawnBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SC_Despawn> CreateSC_DespawnDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint64_t> *id = nullptr) {
  auto id__ = id ? _fbb.CreateVector<uint64_t>(*id) : 0;
  return CreateSC_Despawn(
      _fbb,
      id__);
}

#endif  // FLATBUFFERS_GENERATED_SPAWN_H_
