// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CHARACTERSELECT_H_
#define FLATBUFFERS_GENERATED_CHARACTERSELECT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "Character_generated.h"

struct C_CharacterList;
struct C_CharacterListBuilder;

struct SD_CharacterList;
struct SD_CharacterListBuilder;

struct D_CharacterList;
struct D_CharacterListBuilder;

struct SC_CharacterList;
struct SC_CharacterListBuilder;

struct C_CharacterDelete;
struct C_CharacterDeleteBuilder;

struct SD_CharacterDelete;
struct SD_CharacterDeleteBuilder;

struct D_CharacterDelete;
struct D_CharacterDeleteBuilder;

struct SC_CharacterDelete;
struct SC_CharacterDeleteBuilder;

struct C_CharacterSelect;
struct C_CharacterSelectBuilder;

struct SD_CharacterSelect;
struct SD_CharacterSelectBuilder;

struct D_CharacterSelect;
struct D_CharacterSelectBuilder;

struct SC_CharacterSelect;
struct SC_CharacterSelectBuilder;

enum CharacterListError : uint8_t {
  CharacterListError_SUCCESS = 0,
  CharacterListError_UNKNOWN = 1,
  CharacterListError_MIN = CharacterListError_SUCCESS,
  CharacterListError_MAX = CharacterListError_UNKNOWN
};

inline const CharacterListError (&EnumValuesCharacterListError())[2] {
  static const CharacterListError values[] = {
    CharacterListError_SUCCESS,
    CharacterListError_UNKNOWN
  };
  return values;
}

inline const char * const *EnumNamesCharacterListError() {
  static const char * const names[3] = {
    "SUCCESS",
    "UNKNOWN",
    nullptr
  };
  return names;
}

inline const char *EnumNameCharacterListError(CharacterListError e) {
  if (::flatbuffers::IsOutRange(e, CharacterListError_SUCCESS, CharacterListError_UNKNOWN)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCharacterListError()[index];
}

enum CharacterDeleteError : uint8_t {
  CharacterDeleteError_SUCCESS = 0,
  CharacterDeleteError_UNKNOWN = 1,
  CharacterDeleteError_MIN = CharacterDeleteError_SUCCESS,
  CharacterDeleteError_MAX = CharacterDeleteError_UNKNOWN
};

inline const CharacterDeleteError (&EnumValuesCharacterDeleteError())[2] {
  static const CharacterDeleteError values[] = {
    CharacterDeleteError_SUCCESS,
    CharacterDeleteError_UNKNOWN
  };
  return values;
}

inline const char * const *EnumNamesCharacterDeleteError() {
  static const char * const names[3] = {
    "SUCCESS",
    "UNKNOWN",
    nullptr
  };
  return names;
}

inline const char *EnumNameCharacterDeleteError(CharacterDeleteError e) {
  if (::flatbuffers::IsOutRange(e, CharacterDeleteError_SUCCESS, CharacterDeleteError_UNKNOWN)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCharacterDeleteError()[index];
}

enum CharacterSelectError : uint8_t {
  CharacterSelectError_SUCCESS = 0,
  CharacterSelectError_UNKNOWN = 1,
  CharacterSelectError_MIN = CharacterSelectError_SUCCESS,
  CharacterSelectError_MAX = CharacterSelectError_UNKNOWN
};

inline const CharacterSelectError (&EnumValuesCharacterSelectError())[2] {
  static const CharacterSelectError values[] = {
    CharacterSelectError_SUCCESS,
    CharacterSelectError_UNKNOWN
  };
  return values;
}

inline const char * const *EnumNamesCharacterSelectError() {
  static const char * const names[3] = {
    "SUCCESS",
    "UNKNOWN",
    nullptr
  };
  return names;
}

inline const char *EnumNameCharacterSelectError(CharacterSelectError e) {
  if (::flatbuffers::IsOutRange(e, CharacterSelectError_SUCCESS, CharacterSelectError_UNKNOWN)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCharacterSelectError()[index];
}

struct C_CharacterList FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C_CharacterListBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct C_CharacterListBuilder {
  typedef C_CharacterList Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit C_CharacterListBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C_CharacterList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C_CharacterList>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C_CharacterList> CreateC_CharacterList(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  C_CharacterListBuilder builder_(_fbb);
  return builder_.Finish();
}

struct SD_CharacterList FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SD_CharacterListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SESSION_ID = 4,
    VT_DB_ID = 6,
    VT_SERVER_ID = 8
  };
  uint64_t session_id() const {
    return GetField<uint64_t>(VT_SESSION_ID, 0);
  }
  uint64_t db_id() const {
    return GetField<uint64_t>(VT_DB_ID, 0);
  }
  uint8_t server_id() const {
    return GetField<uint8_t>(VT_SERVER_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_SESSION_ID, 8) &&
           VerifyField<uint64_t>(verifier, VT_DB_ID, 8) &&
           VerifyField<uint8_t>(verifier, VT_SERVER_ID, 1) &&
           verifier.EndTable();
  }
};

struct SD_CharacterListBuilder {
  typedef SD_CharacterList Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_session_id(uint64_t session_id) {
    fbb_.AddElement<uint64_t>(SD_CharacterList::VT_SESSION_ID, session_id, 0);
  }
  void add_db_id(uint64_t db_id) {
    fbb_.AddElement<uint64_t>(SD_CharacterList::VT_DB_ID, db_id, 0);
  }
  void add_server_id(uint8_t server_id) {
    fbb_.AddElement<uint8_t>(SD_CharacterList::VT_SERVER_ID, server_id, 0);
  }
  explicit SD_CharacterListBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SD_CharacterList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SD_CharacterList>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SD_CharacterList> CreateSD_CharacterList(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t session_id = 0,
    uint64_t db_id = 0,
    uint8_t server_id = 0) {
  SD_CharacterListBuilder builder_(_fbb);
  builder_.add_db_id(db_id);
  builder_.add_session_id(session_id);
  builder_.add_server_id(server_id);
  return builder_.Finish();
}

struct D_CharacterList FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef D_CharacterListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OK = 4,
    VT_SESSION_ID = 6,
    VT_LIST = 8
  };
  CharacterListError ok() const {
    return static_cast<CharacterListError>(GetField<uint8_t>(VT_OK, 0));
  }
  uint64_t session_id() const {
    return GetField<uint64_t>(VT_SESSION_ID, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<CharacterPreviewInfo>> *list() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<CharacterPreviewInfo>> *>(VT_LIST);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_OK, 1) &&
           VerifyField<uint64_t>(verifier, VT_SESSION_ID, 8) &&
           VerifyOffset(verifier, VT_LIST) &&
           verifier.VerifyVector(list()) &&
           verifier.VerifyVectorOfTables(list()) &&
           verifier.EndTable();
  }
};

struct D_CharacterListBuilder {
  typedef D_CharacterList Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ok(CharacterListError ok) {
    fbb_.AddElement<uint8_t>(D_CharacterList::VT_OK, static_cast<uint8_t>(ok), 0);
  }
  void add_session_id(uint64_t session_id) {
    fbb_.AddElement<uint64_t>(D_CharacterList::VT_SESSION_ID, session_id, 0);
  }
  void add_list(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<CharacterPreviewInfo>>> list) {
    fbb_.AddOffset(D_CharacterList::VT_LIST, list);
  }
  explicit D_CharacterListBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<D_CharacterList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<D_CharacterList>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<D_CharacterList> CreateD_CharacterList(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    CharacterListError ok = CharacterListError_SUCCESS,
    uint64_t session_id = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<CharacterPreviewInfo>>> list = 0) {
  D_CharacterListBuilder builder_(_fbb);
  builder_.add_session_id(session_id);
  builder_.add_list(list);
  builder_.add_ok(ok);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<D_CharacterList> CreateD_CharacterListDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    CharacterListError ok = CharacterListError_SUCCESS,
    uint64_t session_id = 0,
    const std::vector<::flatbuffers::Offset<CharacterPreviewInfo>> *list = nullptr) {
  auto list__ = list ? _fbb.CreateVector<::flatbuffers::Offset<CharacterPreviewInfo>>(*list) : 0;
  return CreateD_CharacterList(
      _fbb,
      ok,
      session_id,
      list__);
}

struct SC_CharacterList FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_CharacterListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OK = 4,
    VT_LIST = 6
  };
  CharacterListError ok() const {
    return static_cast<CharacterListError>(GetField<uint8_t>(VT_OK, 0));
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<CharacterPreviewInfo>> *list() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<CharacterPreviewInfo>> *>(VT_LIST);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_OK, 1) &&
           VerifyOffset(verifier, VT_LIST) &&
           verifier.VerifyVector(list()) &&
           verifier.VerifyVectorOfTables(list()) &&
           verifier.EndTable();
  }
};

struct SC_CharacterListBuilder {
  typedef SC_CharacterList Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ok(CharacterListError ok) {
    fbb_.AddElement<uint8_t>(SC_CharacterList::VT_OK, static_cast<uint8_t>(ok), 0);
  }
  void add_list(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<CharacterPreviewInfo>>> list) {
    fbb_.AddOffset(SC_CharacterList::VT_LIST, list);
  }
  explicit SC_CharacterListBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_CharacterList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_CharacterList>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_CharacterList> CreateSC_CharacterList(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    CharacterListError ok = CharacterListError_SUCCESS,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<CharacterPreviewInfo>>> list = 0) {
  SC_CharacterListBuilder builder_(_fbb);
  builder_.add_list(list);
  builder_.add_ok(ok);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SC_CharacterList> CreateSC_CharacterListDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    CharacterListError ok = CharacterListError_SUCCESS,
    const std::vector<::flatbuffers::Offset<CharacterPreviewInfo>> *list = nullptr) {
  auto list__ = list ? _fbb.CreateVector<::flatbuffers::Offset<CharacterPreviewInfo>>(*list) : 0;
  return CreateSC_CharacterList(
      _fbb,
      ok,
      list__);
}

struct C_CharacterDelete FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C_CharacterDeleteBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHAR_ID = 4
  };
  uint64_t char_id() const {
    return GetField<uint64_t>(VT_CHAR_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_CHAR_ID, 8) &&
           verifier.EndTable();
  }
};

struct C_CharacterDeleteBuilder {
  typedef C_CharacterDelete Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_char_id(uint64_t char_id) {
    fbb_.AddElement<uint64_t>(C_CharacterDelete::VT_CHAR_ID, char_id, 0);
  }
  explicit C_CharacterDeleteBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C_CharacterDelete> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C_CharacterDelete>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C_CharacterDelete> CreateC_CharacterDelete(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t char_id = 0) {
  C_CharacterDeleteBuilder builder_(_fbb);
  builder_.add_char_id(char_id);
  return builder_.Finish();
}

struct SD_CharacterDelete FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SD_CharacterDeleteBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DB_ID = 4,
    VT_SESSION_ID = 6,
    VT_CHAR_ID = 8
  };
  uint64_t db_id() const {
    return GetField<uint64_t>(VT_DB_ID, 0);
  }
  uint64_t session_id() const {
    return GetField<uint64_t>(VT_SESSION_ID, 0);
  }
  uint64_t char_id() const {
    return GetField<uint64_t>(VT_CHAR_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_DB_ID, 8) &&
           VerifyField<uint64_t>(verifier, VT_SESSION_ID, 8) &&
           VerifyField<uint64_t>(verifier, VT_CHAR_ID, 8) &&
           verifier.EndTable();
  }
};

struct SD_CharacterDeleteBuilder {
  typedef SD_CharacterDelete Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_db_id(uint64_t db_id) {
    fbb_.AddElement<uint64_t>(SD_CharacterDelete::VT_DB_ID, db_id, 0);
  }
  void add_session_id(uint64_t session_id) {
    fbb_.AddElement<uint64_t>(SD_CharacterDelete::VT_SESSION_ID, session_id, 0);
  }
  void add_char_id(uint64_t char_id) {
    fbb_.AddElement<uint64_t>(SD_CharacterDelete::VT_CHAR_ID, char_id, 0);
  }
  explicit SD_CharacterDeleteBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SD_CharacterDelete> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SD_CharacterDelete>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SD_CharacterDelete> CreateSD_CharacterDelete(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t db_id = 0,
    uint64_t session_id = 0,
    uint64_t char_id = 0) {
  SD_CharacterDeleteBuilder builder_(_fbb);
  builder_.add_char_id(char_id);
  builder_.add_session_id(session_id);
  builder_.add_db_id(db_id);
  return builder_.Finish();
}

struct D_CharacterDelete FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef D_CharacterDeleteBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SESSION_ID = 4,
    VT_OK = 6
  };
  uint64_t session_id() const {
    return GetField<uint64_t>(VT_SESSION_ID, 0);
  }
  CharacterDeleteError ok() const {
    return static_cast<CharacterDeleteError>(GetField<uint8_t>(VT_OK, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_SESSION_ID, 8) &&
           VerifyField<uint8_t>(verifier, VT_OK, 1) &&
           verifier.EndTable();
  }
};

struct D_CharacterDeleteBuilder {
  typedef D_CharacterDelete Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_session_id(uint64_t session_id) {
    fbb_.AddElement<uint64_t>(D_CharacterDelete::VT_SESSION_ID, session_id, 0);
  }
  void add_ok(CharacterDeleteError ok) {
    fbb_.AddElement<uint8_t>(D_CharacterDelete::VT_OK, static_cast<uint8_t>(ok), 0);
  }
  explicit D_CharacterDeleteBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<D_CharacterDelete> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<D_CharacterDelete>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<D_CharacterDelete> CreateD_CharacterDelete(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t session_id = 0,
    CharacterDeleteError ok = CharacterDeleteError_SUCCESS) {
  D_CharacterDeleteBuilder builder_(_fbb);
  builder_.add_session_id(session_id);
  builder_.add_ok(ok);
  return builder_.Finish();
}

struct SC_CharacterDelete FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_CharacterDeleteBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OK = 4
  };
  CharacterDeleteError ok() const {
    return static_cast<CharacterDeleteError>(GetField<uint8_t>(VT_OK, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_OK, 1) &&
           verifier.EndTable();
  }
};

struct SC_CharacterDeleteBuilder {
  typedef SC_CharacterDelete Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ok(CharacterDeleteError ok) {
    fbb_.AddElement<uint8_t>(SC_CharacterDelete::VT_OK, static_cast<uint8_t>(ok), 0);
  }
  explicit SC_CharacterDeleteBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_CharacterDelete> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_CharacterDelete>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_CharacterDelete> CreateSC_CharacterDelete(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    CharacterDeleteError ok = CharacterDeleteError_SUCCESS) {
  SC_CharacterDeleteBuilder builder_(_fbb);
  builder_.add_ok(ok);
  return builder_.Finish();
}

struct C_CharacterSelect FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C_CharacterSelectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHAR_ID = 4
  };
  uint64_t char_id() const {
    return GetField<uint64_t>(VT_CHAR_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_CHAR_ID, 8) &&
           verifier.EndTable();
  }
};

struct C_CharacterSelectBuilder {
  typedef C_CharacterSelect Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_char_id(uint64_t char_id) {
    fbb_.AddElement<uint64_t>(C_CharacterSelect::VT_CHAR_ID, char_id, 0);
  }
  explicit C_CharacterSelectBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C_CharacterSelect> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C_CharacterSelect>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C_CharacterSelect> CreateC_CharacterSelect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t char_id = 0) {
  C_CharacterSelectBuilder builder_(_fbb);
  builder_.add_char_id(char_id);
  return builder_.Finish();
}

struct SD_CharacterSelect FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SD_CharacterSelectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SESSION_ID = 4,
    VT_DB_ID = 6,
    VT_CHAR_ID = 8
  };
  uint64_t session_id() const {
    return GetField<uint64_t>(VT_SESSION_ID, 0);
  }
  uint64_t db_id() const {
    return GetField<uint64_t>(VT_DB_ID, 0);
  }
  uint64_t char_id() const {
    return GetField<uint64_t>(VT_CHAR_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_SESSION_ID, 8) &&
           VerifyField<uint64_t>(verifier, VT_DB_ID, 8) &&
           VerifyField<uint64_t>(verifier, VT_CHAR_ID, 8) &&
           verifier.EndTable();
  }
};

struct SD_CharacterSelectBuilder {
  typedef SD_CharacterSelect Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_session_id(uint64_t session_id) {
    fbb_.AddElement<uint64_t>(SD_CharacterSelect::VT_SESSION_ID, session_id, 0);
  }
  void add_db_id(uint64_t db_id) {
    fbb_.AddElement<uint64_t>(SD_CharacterSelect::VT_DB_ID, db_id, 0);
  }
  void add_char_id(uint64_t char_id) {
    fbb_.AddElement<uint64_t>(SD_CharacterSelect::VT_CHAR_ID, char_id, 0);
  }
  explicit SD_CharacterSelectBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SD_CharacterSelect> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SD_CharacterSelect>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SD_CharacterSelect> CreateSD_CharacterSelect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t session_id = 0,
    uint64_t db_id = 0,
    uint64_t char_id = 0) {
  SD_CharacterSelectBuilder builder_(_fbb);
  builder_.add_char_id(char_id);
  builder_.add_db_id(db_id);
  builder_.add_session_id(session_id);
  return builder_.Finish();
}

struct D_CharacterSelect FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef D_CharacterSelectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OK = 4,
    VT_SESSION_ID = 6,
    VT_CHAR_INFO = 8
  };
  CharacterSelectError ok() const {
    return static_cast<CharacterSelectError>(GetField<uint8_t>(VT_OK, 0));
  }
  uint64_t session_id() const {
    return GetField<uint64_t>(VT_SESSION_ID, 0);
  }
  const CharacterTotalInfo *char_info() const {
    return GetPointer<const CharacterTotalInfo *>(VT_CHAR_INFO);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_OK, 1) &&
           VerifyField<uint64_t>(verifier, VT_SESSION_ID, 8) &&
           VerifyOffset(verifier, VT_CHAR_INFO) &&
           verifier.VerifyTable(char_info()) &&
           verifier.EndTable();
  }
};

struct D_CharacterSelectBuilder {
  typedef D_CharacterSelect Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ok(CharacterSelectError ok) {
    fbb_.AddElement<uint8_t>(D_CharacterSelect::VT_OK, static_cast<uint8_t>(ok), 0);
  }
  void add_session_id(uint64_t session_id) {
    fbb_.AddElement<uint64_t>(D_CharacterSelect::VT_SESSION_ID, session_id, 0);
  }
  void add_char_info(::flatbuffers::Offset<CharacterTotalInfo> char_info) {
    fbb_.AddOffset(D_CharacterSelect::VT_CHAR_INFO, char_info);
  }
  explicit D_CharacterSelectBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<D_CharacterSelect> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<D_CharacterSelect>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<D_CharacterSelect> CreateD_CharacterSelect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    CharacterSelectError ok = CharacterSelectError_SUCCESS,
    uint64_t session_id = 0,
    ::flatbuffers::Offset<CharacterTotalInfo> char_info = 0) {
  D_CharacterSelectBuilder builder_(_fbb);
  builder_.add_session_id(session_id);
  builder_.add_char_info(char_info);
  builder_.add_ok(ok);
  return builder_.Finish();
}

struct SC_CharacterSelect FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_CharacterSelectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHAR_INFO = 4
  };
  const CharacterTotalInfo *char_info() const {
    return GetPointer<const CharacterTotalInfo *>(VT_CHAR_INFO);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CHAR_INFO) &&
           verifier.VerifyTable(char_info()) &&
           verifier.EndTable();
  }
};

struct SC_CharacterSelectBuilder {
  typedef SC_CharacterSelect Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_char_info(::flatbuffers::Offset<CharacterTotalInfo> char_info) {
    fbb_.AddOffset(SC_CharacterSelect::VT_CHAR_INFO, char_info);
  }
  explicit SC_CharacterSelectBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_CharacterSelect> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_CharacterSelect>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_CharacterSelect> CreateSC_CharacterSelect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<CharacterTotalInfo> char_info = 0) {
  SC_CharacterSelectBuilder builder_(_fbb);
  builder_.add_char_info(char_info);
  return builder_.Finish();
}

#endif  // FLATBUFFERS_GENERATED_CHARACTERSELECT_H_
