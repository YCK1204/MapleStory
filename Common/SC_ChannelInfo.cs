// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SC_ChannelInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SC_ChannelInfo GetRootAsSC_ChannelInfo(ByteBuffer _bb) { return GetRootAsSC_ChannelInfo(_bb, new SC_ChannelInfo()); }
  public static SC_ChannelInfo GetRootAsSC_ChannelInfo(ByteBuffer _bb, SC_ChannelInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SC_ChannelInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte ServerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public ChannelInfo? Channels(int j) { int o = __p.__offset(6); return o != 0 ? (ChannelInfo?)(new ChannelInfo()).__assign(__p.__vector(o) + j * 4, __p.bb) : null; }
  public int ChannelsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SC_ChannelInfo> CreateSC_ChannelInfo(FlatBufferBuilder builder,
      byte server_id = 0,
      VectorOffset channelsOffset = default(VectorOffset)) {
    builder.StartTable(2);
    SC_ChannelInfo.AddChannels(builder, channelsOffset);
    SC_ChannelInfo.AddServerId(builder, server_id);
    return SC_ChannelInfo.EndSC_ChannelInfo(builder);
  }

  public static void StartSC_ChannelInfo(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddServerId(FlatBufferBuilder builder, byte serverId) { builder.AddByte(0, serverId, 0); }
  public static void AddChannels(FlatBufferBuilder builder, VectorOffset channelsOffset) { builder.AddOffset(1, channelsOffset.Value, 0); }
  public static void StartChannelsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 2); }
  public static Offset<SC_ChannelInfo> EndSC_ChannelInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SC_ChannelInfo>(o);
  }
}


static public class SC_ChannelInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ServerId*/, 1 /*byte*/, 1, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*Channels*/, 4 /*ChannelInfo*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
