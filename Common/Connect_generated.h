// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CONNECT_H_
#define FLATBUFFERS_GENERATED_CONNECT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct C_Connect;
struct C_ConnectBuilder;

struct SC_Connect;
struct SC_ConnectBuilder;

struct C_Connect FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C_ConnectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PUBKEY = 4
  };
  const ::flatbuffers::String *pubkey() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PUBKEY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PUBKEY) &&
           verifier.VerifyString(pubkey()) &&
           verifier.EndTable();
  }
};

struct C_ConnectBuilder {
  typedef C_Connect Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pubkey(::flatbuffers::Offset<::flatbuffers::String> pubkey) {
    fbb_.AddOffset(C_Connect::VT_PUBKEY, pubkey);
  }
  explicit C_ConnectBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C_Connect> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C_Connect>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C_Connect> CreateC_Connect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> pubkey = 0) {
  C_ConnectBuilder builder_(_fbb);
  builder_.add_pubkey(pubkey);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<C_Connect> CreateC_ConnectDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *pubkey = nullptr) {
  auto pubkey__ = pubkey ? _fbb.CreateString(pubkey) : 0;
  return CreateC_Connect(
      _fbb,
      pubkey__);
}

struct SC_Connect FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_ConnectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4
  };
  const ::flatbuffers::String *key() const {
    return GetPointer<const ::flatbuffers::String *>(VT_KEY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           verifier.EndTable();
  }
};

struct SC_ConnectBuilder {
  typedef SC_Connect Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_key(::flatbuffers::Offset<::flatbuffers::String> key) {
    fbb_.AddOffset(SC_Connect::VT_KEY, key);
  }
  explicit SC_ConnectBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_Connect> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_Connect>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_Connect> CreateSC_Connect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> key = 0) {
  SC_ConnectBuilder builder_(_fbb);
  builder_.add_key(key);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SC_Connect> CreateSC_ConnectDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr) {
  auto key__ = key ? _fbb.CreateString(key) : 0;
  return CreateSC_Connect(
      _fbb,
      key__);
}

#endif  // FLATBUFFERS_GENERATED_CONNECT_H_
