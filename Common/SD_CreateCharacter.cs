// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SD_CreateCharacter : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SD_CreateCharacter GetRootAsSD_CreateCharacter(ByteBuffer _bb) { return GetRootAsSD_CreateCharacter(_bb, new SD_CreateCharacter()); }
  public static SD_CreateCharacter GetRootAsSD_CreateCharacter(ByteBuffer _bb, SD_CreateCharacter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SD_CreateCharacter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public ushort CharType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public ulong SessionId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong DbId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public CharacterAbility? Ability { get { int o = __p.__offset(12); return o != 0 ? (CharacterAbility?)(new CharacterAbility()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public byte ServerId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<SD_CreateCharacter> CreateSD_CreateCharacter(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      ushort char_type = 0,
      ulong session_id = 0,
      ulong db_id = 0,
      Offset<CharacterAbility> abilityOffset = default(Offset<CharacterAbility>),
      byte server_id = 0) {
    builder.StartTable(6);
    SD_CreateCharacter.AddDbId(builder, db_id);
    SD_CreateCharacter.AddSessionId(builder, session_id);
    SD_CreateCharacter.AddAbility(builder, abilityOffset);
    SD_CreateCharacter.AddName(builder, nameOffset);
    SD_CreateCharacter.AddCharType(builder, char_type);
    SD_CreateCharacter.AddServerId(builder, server_id);
    return SD_CreateCharacter.EndSD_CreateCharacter(builder);
  }

  public static void StartSD_CreateCharacter(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddCharType(FlatBufferBuilder builder, ushort charType) { builder.AddUshort(1, charType, 0); }
  public static void AddSessionId(FlatBufferBuilder builder, ulong sessionId) { builder.AddUlong(2, sessionId, 0); }
  public static void AddDbId(FlatBufferBuilder builder, ulong dbId) { builder.AddUlong(3, dbId, 0); }
  public static void AddAbility(FlatBufferBuilder builder, Offset<CharacterAbility> abilityOffset) { builder.AddOffset(4, abilityOffset.Value, 0); }
  public static void AddServerId(FlatBufferBuilder builder, byte serverId) { builder.AddByte(5, serverId, 0); }
  public static Offset<SD_CreateCharacter> EndSD_CreateCharacter(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SD_CreateCharacter>(o);
  }
}


static public class SD_CreateCharacterVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Name*/, false)
      && verifier.VerifyField(tablePos, 6 /*CharType*/, 2 /*ushort*/, 2, false)
      && verifier.VerifyField(tablePos, 8 /*SessionId*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*DbId*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyTable(tablePos, 12 /*Ability*/, CharacterAbilityVerify.Verify, false)
      && verifier.VerifyField(tablePos, 14 /*ServerId*/, 1 /*byte*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
