// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MonsterInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static MonsterInfo GetRootAsMonsterInfo(ByteBuffer _bb) { return GetRootAsMonsterInfo(_bb, new MonsterInfo()); }
  public static MonsterInfo GetRootAsMonsterInfo(ByteBuffer _bb, MonsterInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MonsterInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public float DestX { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public MonsterState State { get { int o = __p.__offset(8); return o != 0 ? (MonsterState)__p.bb.Get(o + __p.bb_pos) : MonsterState.Move; } }

  public static Offset<MonsterInfo> CreateMonsterInfo(FlatBufferBuilder builder,
      ulong id = 0,
      float dest_x = 0.0f,
      MonsterState state = MonsterState.Move) {
    builder.StartTable(3);
    MonsterInfo.AddId(builder, id);
    MonsterInfo.AddDestX(builder, dest_x);
    MonsterInfo.AddState(builder, state);
    return MonsterInfo.EndMonsterInfo(builder);
  }

  public static void StartMonsterInfo(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, ulong id) { builder.AddUlong(0, id, 0); }
  public static void AddDestX(FlatBufferBuilder builder, float destX) { builder.AddFloat(1, destX, 0.0f); }
  public static void AddState(FlatBufferBuilder builder, MonsterState state) { builder.AddByte(2, (byte)state, 0); }
  public static Offset<MonsterInfo> EndMonsterInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MonsterInfo>(o);
  }
}


static public class MonsterInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*DestX*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*State*/, 1 /*MonsterState*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
