// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SC_Die : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SC_Die GetRootAsSC_Die(ByteBuffer _bb) { return GetRootAsSC_Die(_bb, new SC_Die()); }
  public static SC_Die GetRootAsSC_Die(ByteBuffer _bb, SC_Die obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SC_Die __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public CharacterInfoDetail? MyPlayerInfo { get { int o = __p.__offset(4); return o != 0 ? (CharacterInfoDetail?)(new CharacterInfoDetail()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<SC_Die> CreateSC_Die(FlatBufferBuilder builder,
      Offset<CharacterInfoDetail> my_player_infoOffset = default(Offset<CharacterInfoDetail>)) {
    builder.StartTable(1);
    SC_Die.AddMyPlayerInfo(builder, my_player_infoOffset);
    return SC_Die.EndSC_Die(builder);
  }

  public static void StartSC_Die(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddMyPlayerInfo(FlatBufferBuilder builder, Offset<CharacterInfoDetail> myPlayerInfoOffset) { builder.AddOffset(0, myPlayerInfoOffset.Value, 0); }
  public static Offset<SC_Die> EndSC_Die(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SC_Die>(o);
  }
}


static public class SC_DieVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyTable(tablePos, 4 /*MyPlayerInfo*/, CharacterInfoDetailVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
