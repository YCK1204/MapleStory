// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SD_CollectionCoin : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SD_CollectionCoin GetRootAsSD_CollectionCoin(ByteBuffer _bb) { return GetRootAsSD_CollectionCoin(_bb, new SD_CollectionCoin()); }
  public static SD_CollectionCoin GetRootAsSD_CollectionCoin(ByteBuffer _bb, SD_CollectionCoin obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SD_CollectionCoin __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong CharId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public int Money { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<SD_CollectionCoin> CreateSD_CollectionCoin(FlatBufferBuilder builder,
      ulong char_id = 0,
      int money = 0) {
    builder.StartTable(2);
    SD_CollectionCoin.AddCharId(builder, char_id);
    SD_CollectionCoin.AddMoney(builder, money);
    return SD_CollectionCoin.EndSD_CollectionCoin(builder);
  }

  public static void StartSD_CollectionCoin(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddCharId(FlatBufferBuilder builder, ulong charId) { builder.AddUlong(0, charId, 0); }
  public static void AddMoney(FlatBufferBuilder builder, int money) { builder.AddInt(1, money, 0); }
  public static Offset<SD_CollectionCoin> EndSD_CollectionCoin(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SD_CollectionCoin>(o);
  }
}


static public class SD_CollectionCoinVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*CharId*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Money*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
