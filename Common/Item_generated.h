// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ITEM_H_
#define FLATBUFFERS_GENERATED_ITEM_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Coin;
struct CoinBuilder;

struct SC_DespawnItem;
struct SC_DespawnItemBuilder;

struct C_CollectCoin;
struct C_CollectCoinBuilder;

struct SD_CollectionCoin;
struct SD_CollectionCoinBuilder;

struct SC_CollectCoin;
struct SC_CollectCoinBuilder;

struct Coin FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CoinBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_MONEY = 6,
    VT_X = 8,
    VT_Y = 10
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  uint16_t money() const {
    return GetField<uint16_t>(VT_MONEY, 0);
  }
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           VerifyField<uint16_t>(verifier, VT_MONEY, 2) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           verifier.EndTable();
  }
};

struct CoinBuilder {
  typedef Coin Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(Coin::VT_ID, id, 0);
  }
  void add_money(uint16_t money) {
    fbb_.AddElement<uint16_t>(Coin::VT_MONEY, money, 0);
  }
  void add_x(float x) {
    fbb_.AddElement<float>(Coin::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(Coin::VT_Y, y, 0.0f);
  }
  explicit CoinBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Coin> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Coin>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Coin> CreateCoin(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    uint16_t money = 0,
    float x = 0.0f,
    float y = 0.0f) {
  CoinBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_money(money);
  return builder_.Finish();
}

struct SC_DespawnItem FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_DespawnItemBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ITEMS = 4
  };
  const ::flatbuffers::Vector<uint64_t> *items() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_ITEMS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ITEMS) &&
           verifier.VerifyVector(items()) &&
           verifier.EndTable();
  }
};

struct SC_DespawnItemBuilder {
  typedef SC_DespawnItem Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_items(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> items) {
    fbb_.AddOffset(SC_DespawnItem::VT_ITEMS, items);
  }
  explicit SC_DespawnItemBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_DespawnItem> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_DespawnItem>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_DespawnItem> CreateSC_DespawnItem(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> items = 0) {
  SC_DespawnItemBuilder builder_(_fbb);
  builder_.add_items(items);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SC_DespawnItem> CreateSC_DespawnItemDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint64_t> *items = nullptr) {
  auto items__ = items ? _fbb.CreateVector<uint64_t>(*items) : 0;
  return CreateSC_DespawnItem(
      _fbb,
      items__);
}

struct C_CollectCoin FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C_CollectCoinBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           verifier.EndTable();
  }
};

struct C_CollectCoinBuilder {
  typedef C_CollectCoin Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(C_CollectCoin::VT_ID, id, 0);
  }
  explicit C_CollectCoinBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C_CollectCoin> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C_CollectCoin>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C_CollectCoin> CreateC_CollectCoin(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0) {
  C_CollectCoinBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

struct SD_CollectionCoin FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SD_CollectionCoinBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHAR_ID = 4,
    VT_MONEY = 6
  };
  uint64_t char_id() const {
    return GetField<uint64_t>(VT_CHAR_ID, 0);
  }
  int32_t money() const {
    return GetField<int32_t>(VT_MONEY, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_CHAR_ID, 8) &&
           VerifyField<int32_t>(verifier, VT_MONEY, 4) &&
           verifier.EndTable();
  }
};

struct SD_CollectionCoinBuilder {
  typedef SD_CollectionCoin Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_char_id(uint64_t char_id) {
    fbb_.AddElement<uint64_t>(SD_CollectionCoin::VT_CHAR_ID, char_id, 0);
  }
  void add_money(int32_t money) {
    fbb_.AddElement<int32_t>(SD_CollectionCoin::VT_MONEY, money, 0);
  }
  explicit SD_CollectionCoinBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SD_CollectionCoin> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SD_CollectionCoin>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SD_CollectionCoin> CreateSD_CollectionCoin(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t char_id = 0,
    int32_t money = 0) {
  SD_CollectionCoinBuilder builder_(_fbb);
  builder_.add_char_id(char_id);
  builder_.add_money(money);
  return builder_.Finish();
}

struct SC_CollectCoin FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_CollectCoinBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_OWNER = 6
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  uint64_t owner() const {
    return GetField<uint64_t>(VT_OWNER, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           VerifyField<uint64_t>(verifier, VT_OWNER, 8) &&
           verifier.EndTable();
  }
};

struct SC_CollectCoinBuilder {
  typedef SC_CollectCoin Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(SC_CollectCoin::VT_ID, id, 0);
  }
  void add_owner(uint64_t owner) {
    fbb_.AddElement<uint64_t>(SC_CollectCoin::VT_OWNER, owner, 0);
  }
  explicit SC_CollectCoinBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_CollectCoin> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_CollectCoin>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_CollectCoin> CreateSC_CollectCoin(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    uint64_t owner = 0) {
  SC_CollectCoinBuilder builder_(_fbb);
  builder_.add_owner(owner);
  builder_.add_id(id);
  return builder_.Finish();
}

#endif  // FLATBUFFERS_GENERATED_ITEM_H_
