// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SPAWN_H_
#define FLATBUFFERS_GENERATED_SPAWN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "Character_generated.h"

struct C_EnterMap;
struct C_EnterMapBuilder;

struct SC_EnterMap;
struct SC_EnterMapBuilder;

struct SC_Spawn;
struct SC_SpawnBuilder;

struct C_Despawn;
struct C_DespawnBuilder;

struct SC_Despawn;
struct SC_DespawnBuilder;

struct C_EnterMap FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C_EnterMapBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAP_ID = 4
  };
  uint8_t map_id() const {
    return GetField<uint8_t>(VT_MAP_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MAP_ID, 1) &&
           verifier.EndTable();
  }
};

struct C_EnterMapBuilder {
  typedef C_EnterMap Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_map_id(uint8_t map_id) {
    fbb_.AddElement<uint8_t>(C_EnterMap::VT_MAP_ID, map_id, 0);
  }
  explicit C_EnterMapBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C_EnterMap> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C_EnterMap>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C_EnterMap> CreateC_EnterMap(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t map_id = 0) {
  C_EnterMapBuilder builder_(_fbb);
  builder_.add_map_id(map_id);
  return builder_.Finish();
}

struct SC_EnterMap FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_EnterMapBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHARACTERS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<CharacterPreviewInfo>> *characters() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<CharacterPreviewInfo>> *>(VT_CHARACTERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CHARACTERS) &&
           verifier.VerifyVector(characters()) &&
           verifier.VerifyVectorOfTables(characters()) &&
           verifier.EndTable();
  }
};

struct SC_EnterMapBuilder {
  typedef SC_EnterMap Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_characters(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<CharacterPreviewInfo>>> characters) {
    fbb_.AddOffset(SC_EnterMap::VT_CHARACTERS, characters);
  }
  explicit SC_EnterMapBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_EnterMap> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_EnterMap>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_EnterMap> CreateSC_EnterMap(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<CharacterPreviewInfo>>> characters = 0) {
  SC_EnterMapBuilder builder_(_fbb);
  builder_.add_characters(characters);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SC_EnterMap> CreateSC_EnterMapDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<CharacterPreviewInfo>> *characters = nullptr) {
  auto characters__ = characters ? _fbb.CreateVector<::flatbuffers::Offset<CharacterPreviewInfo>>(*characters) : 0;
  return CreateSC_EnterMap(
      _fbb,
      characters__);
}

struct SC_Spawn FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_SpawnBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SPAWN_INFO = 4
  };
  const CharacterPreviewInfo *spawn_info() const {
    return GetPointer<const CharacterPreviewInfo *>(VT_SPAWN_INFO);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SPAWN_INFO) &&
           verifier.VerifyTable(spawn_info()) &&
           verifier.EndTable();
  }
};

struct SC_SpawnBuilder {
  typedef SC_Spawn Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_spawn_info(::flatbuffers::Offset<CharacterPreviewInfo> spawn_info) {
    fbb_.AddOffset(SC_Spawn::VT_SPAWN_INFO, spawn_info);
  }
  explicit SC_SpawnBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_Spawn> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_Spawn>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_Spawn> CreateSC_Spawn(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<CharacterPreviewInfo> spawn_info = 0) {
  SC_SpawnBuilder builder_(_fbb);
  builder_.add_spawn_info(spawn_info);
  return builder_.Finish();
}

struct C_Despawn FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C_DespawnBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct C_DespawnBuilder {
  typedef C_Despawn Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit C_DespawnBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C_Despawn> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C_Despawn>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C_Despawn> CreateC_Despawn(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  C_DespawnBuilder builder_(_fbb);
  return builder_.Finish();
}

struct SC_Despawn FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_DespawnBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHAR_ID = 4
  };
  uint64_t char_id() const {
    return GetField<uint64_t>(VT_CHAR_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_CHAR_ID, 8) &&
           verifier.EndTable();
  }
};

struct SC_DespawnBuilder {
  typedef SC_Despawn Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_char_id(uint64_t char_id) {
    fbb_.AddElement<uint64_t>(SC_Despawn::VT_CHAR_ID, char_id, 0);
  }
  explicit SC_DespawnBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_Despawn> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_Despawn>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_Despawn> CreateSC_Despawn(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t char_id = 0) {
  SC_DespawnBuilder builder_(_fbb);
  builder_.add_char_id(char_id);
  return builder_.Finish();
}

#endif  // FLATBUFFERS_GENERATED_SPAWN_H_
