// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ServerInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ServerInfo GetRootAsServerInfo(ByteBuffer _bb) { return GetRootAsServerInfo(_bb, new ServerInfo()); }
  public static ServerInfo GetRootAsServerInfo(ByteBuffer _bb, ServerInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ServerInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public byte Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public ushort MaxUserCount { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public ChannelInfo? Channels(int j) { int o = __p.__offset(10); return o != 0 ? (ChannelInfo?)(new ChannelInfo()).__assign(__p.__vector(o) + j * 4, __p.bb) : null; }
  public int ChannelsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<ServerInfo> CreateServerInfo(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      byte id = 0,
      ushort max_user_count = 0,
      VectorOffset channelsOffset = default(VectorOffset)) {
    builder.StartTable(4);
    ServerInfo.AddChannels(builder, channelsOffset);
    ServerInfo.AddName(builder, nameOffset);
    ServerInfo.AddMaxUserCount(builder, max_user_count);
    ServerInfo.AddId(builder, id);
    return ServerInfo.EndServerInfo(builder);
  }

  public static void StartServerInfo(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddId(FlatBufferBuilder builder, byte id) { builder.AddByte(1, id, 0); }
  public static void AddMaxUserCount(FlatBufferBuilder builder, ushort maxUserCount) { builder.AddUshort(2, maxUserCount, 0); }
  public static void AddChannels(FlatBufferBuilder builder, VectorOffset channelsOffset) { builder.AddOffset(3, channelsOffset.Value, 0); }
  public static void StartChannelsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 2); }
  public static Offset<ServerInfo> EndServerInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ServerInfo>(o);
  }
}


static public class ServerInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Name*/, false)
      && verifier.VerifyField(tablePos, 6 /*Id*/, 1 /*byte*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*MaxUserCount*/, 2 /*ushort*/, 2, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*Channels*/, 4 /*ChannelInfo*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
