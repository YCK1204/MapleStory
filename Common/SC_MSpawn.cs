// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SC_MSpawn : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SC_MSpawn GetRootAsSC_MSpawn(ByteBuffer _bb) { return GetRootAsSC_MSpawn(_bb, new SC_MSpawn()); }
  public static SC_MSpawn GetRootAsSC_MSpawn(ByteBuffer _bb, SC_MSpawn obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SC_MSpawn __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MonsterInfo? Monsters(int j) { int o = __p.__offset(4); return o != 0 ? (MonsterInfo?)(new MonsterInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MonstersLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SC_MSpawn> CreateSC_MSpawn(FlatBufferBuilder builder,
      VectorOffset monstersOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SC_MSpawn.AddMonsters(builder, monstersOffset);
    return SC_MSpawn.EndSC_MSpawn(builder);
  }

  public static void StartSC_MSpawn(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddMonsters(FlatBufferBuilder builder, VectorOffset monstersOffset) { builder.AddOffset(0, monstersOffset.Value, 0); }
  public static VectorOffset CreateMonstersVector(FlatBufferBuilder builder, Offset<MonsterInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMonstersVectorBlock(FlatBufferBuilder builder, Offset<MonsterInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMonstersVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<MonsterInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMonstersVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<MonsterInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMonstersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SC_MSpawn> EndSC_MSpawn(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SC_MSpawn>(o);
  }
}


static public class SC_MSpawnVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Monsters*/, MonsterInfoVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
