// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

public enum PacketType : byte
{
  NONE = 0,
  C_SignUp = 1,
  SD_SignUp = 2,
  SC_SignUp = 3,
  D_SignUp = 4,
  C_SignIn = 5,
  SD_SignIn = 6,
  SC_SignIn = 7,
  D_SignIn = 8,
  C_EnterChannel = 9,
  SC_EnterChannel = 10,
  C_ChannelInfo = 11,
  SC_ChannelInfo = 12,
  C_CharacterList = 13,
  SD_CharacterList = 14,
  D_CharacterList = 15,
  SC_CharacterList = 16,
  C_CharacterDelete = 17,
  SD_CharacterDelete = 18,
  D_CharacterDelete = 19,
  SC_CharacterDelete = 20,
  C_CharacterSelect = 21,
  SD_CharacterSelect = 22,
  D_CharacterSelect = 23,
  SC_CharacterSelect = 24,
  C_CheckName = 25,
  SD_CheckName = 26,
  D_CheckName = 27,
  SC_CheckName = 28,
  C_CreateCharacter = 29,
  SD_CreateCharacter = 30,
  D_CreateCharacter = 31,
  SC_CreateCharacter = 32,
  C_Portal = 33,
  SC_Portal = 34,
  C_EnterGame = 35,
  SC_EnterGame = 36,
  SC_PSpawn = 37,
  SC_MSpawn = 38,
  C_Despawn = 39,
  SC_Despawn = 40,
  C_CreatureInfos = 41,
  SC_CreatureInfos = 42,
  C_MoveStart = 43,
  SC_MoveStart = 44,
  C_MoveEnd = 45,
  SC_MoveEnd = 46,
  C_Jump = 47,
  SC_Jump = 48,
  C_ProneStabStart = 49,
  SC_ProneStabStart = 50,
  C_ProneStabEnd = 51,
  SC_ProneStabEnd = 52,
};



static public class PacketTypeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, byte typeId, uint tablePos)
  {
    bool result = true;
    switch((PacketType)typeId)
    {
      case PacketType.C_SignUp:
        result = C_SignUpVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SD_SignUp:
        result = SD_SignUpVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SC_SignUp:
        result = SC_SignUpVerify.Verify(verifier, tablePos);
        break;
      case PacketType.D_SignUp:
        result = D_SignUpVerify.Verify(verifier, tablePos);
        break;
      case PacketType.C_SignIn:
        result = C_SignInVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SD_SignIn:
        result = SD_SignInVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SC_SignIn:
        result = SC_SignInVerify.Verify(verifier, tablePos);
        break;
      case PacketType.D_SignIn:
        result = D_SignInVerify.Verify(verifier, tablePos);
        break;
      case PacketType.C_EnterChannel:
        result = C_EnterChannelVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SC_EnterChannel:
        result = SC_EnterChannelVerify.Verify(verifier, tablePos);
        break;
      case PacketType.C_ChannelInfo:
        result = C_ChannelInfoVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SC_ChannelInfo:
        result = SC_ChannelInfoVerify.Verify(verifier, tablePos);
        break;
      case PacketType.C_CharacterList:
        result = C_CharacterListVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SD_CharacterList:
        result = SD_CharacterListVerify.Verify(verifier, tablePos);
        break;
      case PacketType.D_CharacterList:
        result = D_CharacterListVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SC_CharacterList:
        result = SC_CharacterListVerify.Verify(verifier, tablePos);
        break;
      case PacketType.C_CharacterDelete:
        result = C_CharacterDeleteVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SD_CharacterDelete:
        result = SD_CharacterDeleteVerify.Verify(verifier, tablePos);
        break;
      case PacketType.D_CharacterDelete:
        result = D_CharacterDeleteVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SC_CharacterDelete:
        result = SC_CharacterDeleteVerify.Verify(verifier, tablePos);
        break;
      case PacketType.C_CharacterSelect:
        result = C_CharacterSelectVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SD_CharacterSelect:
        result = SD_CharacterSelectVerify.Verify(verifier, tablePos);
        break;
      case PacketType.D_CharacterSelect:
        result = D_CharacterSelectVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SC_CharacterSelect:
        result = SC_CharacterSelectVerify.Verify(verifier, tablePos);
        break;
      case PacketType.C_CheckName:
        result = C_CheckNameVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SD_CheckName:
        result = SD_CheckNameVerify.Verify(verifier, tablePos);
        break;
      case PacketType.D_CheckName:
        result = D_CheckNameVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SC_CheckName:
        result = SC_CheckNameVerify.Verify(verifier, tablePos);
        break;
      case PacketType.C_CreateCharacter:
        result = C_CreateCharacterVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SD_CreateCharacter:
        result = SD_CreateCharacterVerify.Verify(verifier, tablePos);
        break;
      case PacketType.D_CreateCharacter:
        result = D_CreateCharacterVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SC_CreateCharacter:
        result = SC_CreateCharacterVerify.Verify(verifier, tablePos);
        break;
      case PacketType.C_Portal:
        result = C_PortalVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SC_Portal:
        result = SC_PortalVerify.Verify(verifier, tablePos);
        break;
      case PacketType.C_EnterGame:
        result = C_EnterGameVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SC_EnterGame:
        result = SC_EnterGameVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SC_PSpawn:
        result = SC_PSpawnVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SC_MSpawn:
        result = SC_MSpawnVerify.Verify(verifier, tablePos);
        break;
      case PacketType.C_Despawn:
        result = C_DespawnVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SC_Despawn:
        result = SC_DespawnVerify.Verify(verifier, tablePos);
        break;
      case PacketType.C_CreatureInfos:
        result = C_CreatureInfosVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SC_CreatureInfos:
        result = SC_CreatureInfosVerify.Verify(verifier, tablePos);
        break;
      case PacketType.C_MoveStart:
        result = C_MoveStartVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SC_MoveStart:
        result = SC_MoveStartVerify.Verify(verifier, tablePos);
        break;
      case PacketType.C_MoveEnd:
        result = C_MoveEndVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SC_MoveEnd:
        result = SC_MoveEndVerify.Verify(verifier, tablePos);
        break;
      case PacketType.C_Jump:
        result = C_JumpVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SC_Jump:
        result = SC_JumpVerify.Verify(verifier, tablePos);
        break;
      case PacketType.C_ProneStabStart:
        result = C_ProneStabStartVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SC_ProneStabStart:
        result = SC_ProneStabStartVerify.Verify(verifier, tablePos);
        break;
      case PacketType.C_ProneStabEnd:
        result = C_ProneStabEndVerify.Verify(verifier, tablePos);
        break;
      case PacketType.SC_ProneStabEnd:
        result = SC_ProneStabEndVerify.Verify(verifier, tablePos);
        break;
      default: result = true;
        break;
    }
    return result;
  }
}

