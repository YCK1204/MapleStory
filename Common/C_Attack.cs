// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct C_Attack : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static C_Attack GetRootAsC_Attack(ByteBuffer _bb) { return GetRootAsC_Attack(_bb, new C_Attack()); }
  public static C_Attack GetRootAsC_Attack(ByteBuffer _bb, C_Attack obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public C_Attack __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public AttackEnum AttackId { get { int o = __p.__offset(4); return o != 0 ? (AttackEnum)__p.bb.Get(o + __p.bb_pos) : AttackEnum.TANJIRO_ATTACK1; } }

  public static Offset<C_Attack> CreateC_Attack(FlatBufferBuilder builder,
      AttackEnum attack_id = AttackEnum.TANJIRO_ATTACK1) {
    builder.StartTable(1);
    C_Attack.AddAttackId(builder, attack_id);
    return C_Attack.EndC_Attack(builder);
  }

  public static void StartC_Attack(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddAttackId(FlatBufferBuilder builder, AttackEnum attackId) { builder.AddByte(0, (byte)attackId, 0); }
  public static Offset<C_Attack> EndC_Attack(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<C_Attack>(o);
  }
}


static public class C_AttackVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*AttackId*/, 1 /*AttackEnum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
