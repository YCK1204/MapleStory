// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAYER_H_
#define FLATBUFFERS_GENERATED_PLAYER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "Character_generated.h"
#include "Creature_generated.h"

struct PlayerInfo;
struct PlayerInfoBuilder;

struct PlayerInfoDetail;
struct PlayerInfoDetailBuilder;

struct C_Attack;
struct C_AttackBuilder;

struct SC_Attack;
struct SC_AttackBuilder;

struct C_UpdatePosition;
struct C_UpdatePositionBuilder;

enum AttackEnum : uint8_t {
  AttackEnum_TANJIRO_ATTACK1 = 0,
  AttackEnum_TANJIRO_ATTACK2 = 1,
  AttackEnum_TANJIRO_ATTACK3 = 2,
  AttackEnum_TANJIRO_ATTACK4 = 3,
  AttackEnum_MIN = AttackEnum_TANJIRO_ATTACK1,
  AttackEnum_MAX = AttackEnum_TANJIRO_ATTACK4
};

inline const AttackEnum (&EnumValuesAttackEnum())[4] {
  static const AttackEnum values[] = {
    AttackEnum_TANJIRO_ATTACK1,
    AttackEnum_TANJIRO_ATTACK2,
    AttackEnum_TANJIRO_ATTACK3,
    AttackEnum_TANJIRO_ATTACK4
  };
  return values;
}

inline const char * const *EnumNamesAttackEnum() {
  static const char * const names[5] = {
    "TANJIRO_ATTACK1",
    "TANJIRO_ATTACK2",
    "TANJIRO_ATTACK3",
    "TANJIRO_ATTACK4",
    nullptr
  };
  return names;
}

inline const char *EnumNameAttackEnum(AttackEnum e) {
  if (::flatbuffers::IsOutRange(e, AttackEnum_TANJIRO_ATTACK1, AttackEnum_TANJIRO_ATTACK4)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAttackEnum()[index];
}

struct PlayerInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHAR_INFO = 4,
    VT_POSITION = 6
  };
  const CharacterInfo *char_info() const {
    return GetPointer<const CharacterInfo *>(VT_CHAR_INFO);
  }
  const Position *position() const {
    return GetPointer<const Position *>(VT_POSITION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CHAR_INFO) &&
           verifier.VerifyTable(char_info()) &&
           VerifyOffset(verifier, VT_POSITION) &&
           verifier.VerifyTable(position()) &&
           verifier.EndTable();
  }
};

struct PlayerInfoBuilder {
  typedef PlayerInfo Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_char_info(::flatbuffers::Offset<CharacterInfo> char_info) {
    fbb_.AddOffset(PlayerInfo::VT_CHAR_INFO, char_info);
  }
  void add_position(::flatbuffers::Offset<Position> position) {
    fbb_.AddOffset(PlayerInfo::VT_POSITION, position);
  }
  explicit PlayerInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerInfo>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerInfo> CreatePlayerInfo(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<CharacterInfo> char_info = 0,
    ::flatbuffers::Offset<Position> position = 0) {
  PlayerInfoBuilder builder_(_fbb);
  builder_.add_position(position);
  builder_.add_char_info(char_info);
  return builder_.Finish();
}

struct PlayerInfoDetail FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerInfoDetailBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHAR_INFO = 4,
    VT_POSITION = 6
  };
  const CharacterInfoDetail *char_info() const {
    return GetPointer<const CharacterInfoDetail *>(VT_CHAR_INFO);
  }
  const Position *position() const {
    return GetPointer<const Position *>(VT_POSITION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CHAR_INFO) &&
           verifier.VerifyTable(char_info()) &&
           VerifyOffset(verifier, VT_POSITION) &&
           verifier.VerifyTable(position()) &&
           verifier.EndTable();
  }
};

struct PlayerInfoDetailBuilder {
  typedef PlayerInfoDetail Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_char_info(::flatbuffers::Offset<CharacterInfoDetail> char_info) {
    fbb_.AddOffset(PlayerInfoDetail::VT_CHAR_INFO, char_info);
  }
  void add_position(::flatbuffers::Offset<Position> position) {
    fbb_.AddOffset(PlayerInfoDetail::VT_POSITION, position);
  }
  explicit PlayerInfoDetailBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerInfoDetail> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerInfoDetail>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerInfoDetail> CreatePlayerInfoDetail(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<CharacterInfoDetail> char_info = 0,
    ::flatbuffers::Offset<Position> position = 0) {
  PlayerInfoDetailBuilder builder_(_fbb);
  builder_.add_position(position);
  builder_.add_char_info(char_info);
  return builder_.Finish();
}

struct C_Attack FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C_AttackBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ATTACK_ID = 4,
    VT_TARGETS = 6
  };
  AttackEnum attack_id() const {
    return static_cast<AttackEnum>(GetField<uint8_t>(VT_ATTACK_ID, 0));
  }
  const ::flatbuffers::Vector<uint64_t> *targets() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_TARGETS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ATTACK_ID, 1) &&
           VerifyOffset(verifier, VT_TARGETS) &&
           verifier.VerifyVector(targets()) &&
           verifier.EndTable();
  }
};

struct C_AttackBuilder {
  typedef C_Attack Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_attack_id(AttackEnum attack_id) {
    fbb_.AddElement<uint8_t>(C_Attack::VT_ATTACK_ID, static_cast<uint8_t>(attack_id), 0);
  }
  void add_targets(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> targets) {
    fbb_.AddOffset(C_Attack::VT_TARGETS, targets);
  }
  explicit C_AttackBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C_Attack> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C_Attack>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C_Attack> CreateC_Attack(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    AttackEnum attack_id = AttackEnum_TANJIRO_ATTACK1,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> targets = 0) {
  C_AttackBuilder builder_(_fbb);
  builder_.add_targets(targets);
  builder_.add_attack_id(attack_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<C_Attack> CreateC_AttackDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    AttackEnum attack_id = AttackEnum_TANJIRO_ATTACK1,
    const std::vector<uint64_t> *targets = nullptr) {
  auto targets__ = targets ? _fbb.CreateVector<uint64_t>(*targets) : 0;
  return CreateC_Attack(
      _fbb,
      attack_id,
      targets__);
}

struct SC_Attack FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_AttackBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_ATTACK_ID = 6,
    VT_TARGETS = 8
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  AttackEnum attack_id() const {
    return static_cast<AttackEnum>(GetField<uint8_t>(VT_ATTACK_ID, 0));
  }
  const ::flatbuffers::Vector<uint64_t> *targets() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_TARGETS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           VerifyField<uint8_t>(verifier, VT_ATTACK_ID, 1) &&
           VerifyOffset(verifier, VT_TARGETS) &&
           verifier.VerifyVector(targets()) &&
           verifier.EndTable();
  }
};

struct SC_AttackBuilder {
  typedef SC_Attack Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(SC_Attack::VT_ID, id, 0);
  }
  void add_attack_id(AttackEnum attack_id) {
    fbb_.AddElement<uint8_t>(SC_Attack::VT_ATTACK_ID, static_cast<uint8_t>(attack_id), 0);
  }
  void add_targets(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> targets) {
    fbb_.AddOffset(SC_Attack::VT_TARGETS, targets);
  }
  explicit SC_AttackBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_Attack> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_Attack>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_Attack> CreateSC_Attack(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    AttackEnum attack_id = AttackEnum_TANJIRO_ATTACK1,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> targets = 0) {
  SC_AttackBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_targets(targets);
  builder_.add_attack_id(attack_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SC_Attack> CreateSC_AttackDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    AttackEnum attack_id = AttackEnum_TANJIRO_ATTACK1,
    const std::vector<uint64_t> *targets = nullptr) {
  auto targets__ = targets ? _fbb.CreateVector<uint64_t>(*targets) : 0;
  return CreateSC_Attack(
      _fbb,
      id,
      attack_id,
      targets__);
}

struct C_UpdatePosition FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C_UpdatePositionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4
  };
  const Position *position() const {
    return GetPointer<const Position *>(VT_POSITION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSITION) &&
           verifier.VerifyTable(position()) &&
           verifier.EndTable();
  }
};

struct C_UpdatePositionBuilder {
  typedef C_UpdatePosition Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_position(::flatbuffers::Offset<Position> position) {
    fbb_.AddOffset(C_UpdatePosition::VT_POSITION, position);
  }
  explicit C_UpdatePositionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C_UpdatePosition> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C_UpdatePosition>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C_UpdatePosition> CreateC_UpdatePosition(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Position> position = 0) {
  C_UpdatePositionBuilder builder_(_fbb);
  builder_.add_position(position);
  return builder_.Finish();
}

#endif  // FLATBUFFERS_GENERATED_PLAYER_H_
