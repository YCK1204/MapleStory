// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SC_CharacterDelete : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SC_CharacterDelete GetRootAsSC_CharacterDelete(ByteBuffer _bb) { return GetRootAsSC_CharacterDelete(_bb, new SC_CharacterDelete()); }
  public static SC_CharacterDelete GetRootAsSC_CharacterDelete(ByteBuffer _bb, SC_CharacterDelete obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SC_CharacterDelete __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public CharacterDeleteError Ok { get { int o = __p.__offset(4); return o != 0 ? (CharacterDeleteError)__p.bb.Get(o + __p.bb_pos) : CharacterDeleteError.SUCCESS; } }

  public static Offset<SC_CharacterDelete> CreateSC_CharacterDelete(FlatBufferBuilder builder,
      CharacterDeleteError ok = CharacterDeleteError.SUCCESS) {
    builder.StartTable(1);
    SC_CharacterDelete.AddOk(builder, ok);
    return SC_CharacterDelete.EndSC_CharacterDelete(builder);
  }

  public static void StartSC_CharacterDelete(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddOk(FlatBufferBuilder builder, CharacterDeleteError ok) { builder.AddByte(0, (byte)ok, 0); }
  public static Offset<SC_CharacterDelete> EndSC_CharacterDelete(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SC_CharacterDelete>(o);
  }
}


static public class SC_CharacterDeleteVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Ok*/, 1 /*CharacterDeleteError*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
